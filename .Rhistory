InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform
InitL50 = 400
InitDelta = 100
params = c(InitFishMort_logit, log(InitL50), log(InitDelta))
FittedRes2=GetLengthBasedCatchCurveResults(params, DistnType, GrowthCurveType, GrowthParams, RefnceAges, MLL, SelectivityType, ObsRetCatchFreqAtLen,
lbnd, ubnd, midpt, SelectivityVec, PropReleased, ObsDiscCatchFreqAtLen, DiscMort, CVSizeAtAge, MaxAge, NatMort, TimeStep)
FittedRes2$ParamEst
FittedRes1$convergence
PlotLengthBasedCatchCurve_RetCatch(params, DistnType, MLL, SelectivityType, ObsRetCatchFreqAtLen, lbnd, ubnd, midpt,
SelectivityVec, PropReleased, ObsDiscCatchFreqAtLen, DiscMort, GrowthCurveType, GrowthParams,
RefnceAges, MaxAge, NatMort, TimeStep, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, xmax=1800, xint=200,
ymax=0.1, yint=0.05, PlotCLs=TRUE, FittedRes2, nReps=200)
# non-hermaphroditic species
MaxModelAge <- 40 # maximum age considered by model, years
TimeStep <- 1 # Model time step (y) (for shorter-lived species, might be appropriate to use a smaller time step)
MaxLen = 1700
LenInc = 20
lbnd = seq(0,MaxLen - LenInc, LenInc)
ubnd = lbnd + LenInc
midpt = lbnd + (LenInc/2)
nLenCl = length(midpt)
GrowthCurveType = 2 # 1 = von Bertalanffy, 2 = Schnute
y1 = c(435.3, 400.3) # growth - Schnute
y2 = c(1089.1, 1034.5) # growth - Schnute
a = c(0.044, 0.136) # growth - Schnute
b = c(2.748, 1.971) # growth - Schnute
GrowthParams = data.frame(y1=y1, y2=y2, a=a, b=b)
t1 = c(1,1)
t2 = c(10,10)
RefnceAges = data.frame(t1=t1, t2=t2)
CVSizeAtAge = c(0.06,0.06)
lenwt_a <- 0.0001971 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
ln_lenwt_a <- NA # for log-log relationship
lenwt_b <- 2.982 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
WLrel_Type <- 1 # 1=power, 2=log-log relationship
EstWtAtLen <- data.frame(EstFemWtAtLen=NA,
EstMalWtAtLen=NA) # weight at age, inputted as values in data frame
ReprodScale <- 1 # 1=default (standard calculations for spawning biomass), 2=hyperallometric reproductive scaling with female mass (i.e. BOFFF effects)
ReprodPattern <- 1 # 1 = gonochoristic (separate sexes), 2 = protogynous (female to male sex change), 3 = protandrous (male to female sex change)
InitRatioFem <- 0.5 # Ratio of females to males at recruitment age/length
FinalSex_L50 <- NA # Logistic sex change relationship parameters (inflection point)
FinalSex_L95 <- NA # Logistic sex change relationship parameters (95% of max probability)
EstSexRatioAtLen <- NA  # sex ratio at length inputted as vector
EggFertParam <- NA # (NA or from ~0.2-1) NA = no effect, ~0.2 = direct effect of popn. sex ratio changes on egg fertilisation rates, 1 = no effects
mat_L50 <- c(831, 831) # females, males - Logistic length (mm) at maturity relationship parameters
mat_L95 <- c(932, 932) # females, males - Logistic length (mm) at maturity relationship parameters
EstMatAtLen <- data.frame(EstFemMatAtLen=NA,
EstMalMatAtLen=NA) # maturity at length, inputted as values in data frame
L50=FittedRes1$ParamEst[2,1]
L95=FittedRes1$ParamEst[2,1] + FittedRes1$ParamEst[3,1]
sel_L50 <- c(L50, L50) # females, males - Logistic length selectivity relationship parameters
sel_L95 <- c(L95, L95) # females, males - Logistic length selectivity relationship parameters
EstGearSelAtLen <- data.frame(EstFemGearSelAtLen=NA,
EstMalGearSelAtLen=NA)
ret_Pmax <- NA # maximum retention, values lower than 1 imply discarding of fish above MLL
ret_L50 <- NA # females, males - Logistic fish retention at length parameters
ret_L95 <- NA # females, males - Logistic fish retention at length parameters
EstRetenAtLen <- data.frame(EstFemRetenAtLen=rep(1,length(midpt)),
EstMalRetenAtLen=rep(1,length(midpt)))
DiscMort <- 0 # discard mortality (e.g. 50% released fish die = 0.5)
Steepness <- 0.75 # steepness parameter of the Beverton and Holt stock-recruitment relationship
SRrel_Type <- 1 # 1 = Beverton-Holt, 2=Ricker
NatMort = 4.22 / 29 # natural mortality  (year-1)
FMort = FittedRes1$ParamEst[1,1]
Res=CalcYPRAndSPRForFMort_LB(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type, EstWtAtLen,
ReprodScale, ReprodPattern, InitRatioFem, FinalSex_L50, FinalSex_L95, EstSexRatioAtLen,
EggFertParam, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, EstGearSelAtLen, ret_Pmax,
ret_L50, ret_L95, EstRetenAtLen, DiscMort, Steepness, SRrel_Type, NatMort, FMort)
Res$Fem_SPR
Res$Eq_FemRelSpBiom
sel_L50
sel_L95
FMort
PlotOpt <- 0 # 0=all plots, 1=len at-age, 2=wt at length, 3=fem mat/sel_land at length, 4=mal mat/sel_land at length,
# 5=fem sel_land/sel_disc/prob reten/gear sel, 6=fem sel_land/sel_disc/prob reten/gear sel, 7=fem F at length,
# 8=mal F at length, 9=fem rel surv, 10=mal rel surv, 11=fem biom at age, 12=fem biom at age,
# 13=catch at length, 14=ypr/eq catch, 15=fem SPR/Brel, 16=mal SPR/Brel, 17=comb sex SPR/Brel, 18=eq recruit
# 19=male depletion vs F, 20=plot prop male vs F, 21=plot male depletion vs egg. fert rate,
# 22=plot male depletion vs eq. recruitment (plots 1-22 plotted if !is.na(EggFertParam))
Current_F = FMort
PlotPerRecruitResults_LB(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type, EstWtAtLen,
ReprodScale, ReprodPattern, InitRatioFem, FinalSex_L50, FinalSex_L95, EstSexRatioAtLen,
EggFertParam, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, EstGearSelAtLen, ret_Pmax,
ret_L50, ret_L95, EstRetenAtLen, DiscMort, Steepness, SRrel_Type, NatMort, Current_F, PlotOpt)
# now with von Bertalanffy growth curve
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf <- c(1279, 1139) # mm - von Bertalanffy growth model parameters - Females, males
vbK <- c(0.188, 0.240) # year-1 - von Bertalanffy growth model parameters - Females, males
tzero <- c(-0.900, -0.563) # years - von Bertalanffy growth model parameters - Females, males
GrowthParams = data.frame(Linf=Linf, vbK=vbK, tzero=tzero)
RefnceAges = NA
L50=FittedRes2$ParamEst[2,1]
L95=FittedRes2$ParamEst[2,1] + FittedRes1$ParamEst[3,1]
sel_L50 <- c(L50, L50) # females, males - Logistic length selectivity relationship parameters
sel_L95 <- c(L95, L95) # females, males - Logistic length selectivity relationship parameters
FMort = FittedRes2$ParamEst[1,1]
Res=CalcYPRAndSPRForFMort_LB(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type, EstWtAtLen,
ReprodScale, ReprodPattern, InitRatioFem, FinalSex_L50, FinalSex_L95, EstSexRatioAtLen,
EggFertParam, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, EstGearSelAtLen, ret_Pmax,
ret_L50, ret_L95, EstRetenAtLen, DiscMort, Steepness, SRrel_Type, NatMort, FMort)
Res$Fem_SPR
Res$Eq_FemRelSpBiom
EggFertParam
NatMort
mat_L50
mat_L95
sel_L50
sel_L95
# averaging values of parmaeters (as is not good practice!)
GrowthCurveType = 2
y1 = mean(435.3, 400.3) # growth - Schnute
y2 = mean(1089.1, 1034.5) # growth - Schnute
a = mean(0.044, 0.136) # growth - Schnute
b = mean(2.748, 1.971) # growth - Schnute
GrowthParams = c(y1, y2, a, b)
t1 = 1
t2 = 10
RefnceAges = c(t1, t2)
CVSizeAtAge = 0.06
# marginal length frequency data (sexes combined, i.e. simulating for data poor situation where
# sex of the length samples not known)
ObsRetCatchFreqAtLen = SimRes$ObsRetCatchFreqAtLen
# sum(ObsRetCatchFreqAtLen)
# sum(SimRes$ObsRetCatchFreqAtLen_Fem)
# sum(SimRes$ObsRetCatchFreqAtLen_Mal)
ObsDiscCatchFreqAtLen = NA # (or set to Res$ObsDiscCatchFreqAtLen)
PropReleased = NA # proportion of fish released, vector including mean and sd (option probably now obsolete)
midpt=SimRes$midpt
lbnd=SimRes$lbnd
ubnd=SimRes$ubnd
DistnType = 1 # 1 = Multinomial, 2 = Dirichlet multinomial
InitFishMort = 0.25 # specify starting parameters
InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform
InitL50 = 400
InitDelta = 100
params = c(InitFishMort_logit, log(InitL50), log(InitDelta))
FittedRes1=GetLengthBasedCatchCurveResults(params, DistnType, GrowthCurveType, GrowthParams, RefnceAges, MLL, SelectivityType, ObsRetCatchFreqAtLen,
lbnd, ubnd, midpt, SelectivityVec, PropReleased, ObsDiscCatchFreqAtLen, DiscMort, CVSizeAtAge, MaxAge, NatMort, TimeStep)
FittedRes1$ParamEst
# true F = 0.1455172
par(mfrow=c(1,1))
PlotLengthBasedCatchCurve_RetCatch(params, DistnType, MLL, SelectivityType, ObsRetCatchFreqAtLen, lbnd, ubnd, midpt,
SelectivityVec, PropReleased, ObsDiscCatchFreqAtLen, DiscMort, GrowthCurveType, GrowthParams,
RefnceAges, MaxAge, NatMort, TimeStep, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, xmax=1500, xint=500,
ymax=0.1, yint=0.05, PlotCLs=TRUE, FittedRes1, nReps=200)
# averaging values of parmaeters (as is not good practice!)
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf = mean(1279, 1139)
vbK = mean(0.188, 0.240)
GrowthParams = c(Linf, vbK)
RefnceAges = NA
CVSizeAtAge = 0.06
# marginal length frequency data (sexes combined, i.e. simulating for data poor situation where
# sex of the length samples not known)
ObsRetCatchFreqAtLen = SimRes$ObsRetCatchFreqAtLen
# sum(ObsRetCatchFreqAtLen)
# sum(SimRes$ObsRetCatchFreqAtLen_Fem)
# sum(SimRes$ObsRetCatchFreqAtLen_Mal)
ObsDiscCatchFreqAtLen = NA # (or set to Res$ObsDiscCatchFreqAtLen)
PropReleased = NA # proportion of fish released, vector including mean and sd (option probably now obsolete)
midpt=SimRes$midpt
lbnd=SimRes$lbnd
ubnd=SimRes$ubnd
DistnType = 1 # 1 = Multinomial, 2 = Dirichlet multinomial
InitFishMort = 0.25 # specify starting parameters
InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform
InitL50 = 400
InitDelta = 100
params = c(InitFishMort_logit, log(InitL50), log(InitDelta))
FittedRes3=GetLengthBasedCatchCurveResults(params, DistnType, GrowthCurveType, GrowthParams, RefnceAges, MLL, SelectivityType, ObsRetCatchFreqAtLen,
lbnd, ubnd, midpt, SelectivityVec, PropReleased, ObsDiscCatchFreqAtLen, DiscMort, CVSizeAtAge, MaxAge, NatMort, TimeStep)
FittedRes3$ParamEst
# true F = 0.1455172
par(mfrow=c(1,1))
PlotLengthBasedCatchCurve_RetCatch(params, DistnType, MLL, SelectivityType, ObsRetCatchFreqAtLen, lbnd, ubnd, midpt,
SelectivityVec, PropReleased, ObsDiscCatchFreqAtLen, DiscMort, GrowthCurveType, GrowthParams,
RefnceAges, MaxAge, NatMort, TimeStep, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, xmax=1500, xint=500,
ymax=0.1, yint=0.05, PlotCLs=TRUE, FittedRes3, nReps=200)
MaxModelAge <- 40 # maximum age considered by model, years
TimeStep <- 1 # Model time step (y) (for shorter-lived species, might be appropriate to use a smaller time step)
MaxLen = 1700
LenInc = 20
lbnd = seq(0,MaxLen - LenInc, LenInc)
ubnd = lbnd + LenInc
midpt = lbnd + (LenInc/2)
nLenCl = length(midpt)
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf_mean = mean(1279, 1139)
vbK_mean = mean(0.188, 0.240)
tzero_mean = mean(-0.900, -0.563) # years - von Bertalanffy growth model parameters - Females, males
Linf <- c(Linf_mean, Linf_mean) # mm - von Bertalanffy growth model parameters - Females, males
vbK <- c(vbK_mean, vbK_mean) # year-1 - von Bertalanffy growth model parameters - Females, males
tzero <- c(tzero_mean, tzero_mean) # years - von Bertalanffy growth model parameters - Females, males
GrowthParams = data.frame(Linf=Linf, vbK=vbK, tzero=tzero)
CVSizeAtAge = c(0.06,0.06)
RefnceAges = NA
lenwt_a <- 0.0001971 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
ln_lenwt_a <- NA # for log-log relationship
lenwt_b <- 2.982 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
WLrel_Type <- 1 # 1=power, 2=log-log relationship
EstWtAtLen <- data.frame(EstFemWtAtLen=NA,
EstMalWtAtLen=NA) # weight at age, inputted as values in data frame
ReprodScale <- 1 # 1=default (standard calculations for spawning biomass), 2=hyperallometric reproductive scaling with female mass (i.e. BOFFF effects)
ReprodPattern <- 1 # 1 = gonochoristic (separate sexes), 2 = protogynous (female to male sex change), 3 = protandrous (male to female sex change)
InitRatioFem <- 0.5 # Ratio of females to males at recruitment age/length
MaxModelAge <- 40 # maximum age considered by model, years
TimeStep <- 1 # Model time step (y) (for shorter-lived species, might be appropriate to use a smaller time step)
MaxLen = 1700
LenInc = 20
lbnd = seq(0,MaxLen - LenInc, LenInc)
ubnd = lbnd + LenInc
midpt = lbnd + (LenInc/2)
nLenCl = length(midpt)
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute
Linf_mean = mean(1279, 1139)
vbK_mean = mean(0.188, 0.240)
tzero_mean = mean(-0.900, -0.563) # years - von Bertalanffy growth model parameters - Females, males
Linf <- c(Linf_mean, Linf_mean) # mm - von Bertalanffy growth model parameters - Females, males
vbK <- c(vbK_mean, vbK_mean) # year-1 - von Bertalanffy growth model parameters - Females, males
tzero <- c(tzero_mean, tzero_mean) # years - von Bertalanffy growth model parameters - Females, males
GrowthParams = data.frame(Linf=Linf, vbK=vbK, tzero=tzero)
CVSizeAtAge = c(0.06,0.06)
RefnceAges = NA
lenwt_a <- 0.0001971 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
ln_lenwt_a <- NA # for log-log relationship
lenwt_b <- 2.982 # combined sexes - weight (g) vs length (mm, TL) relationship parameters
WLrel_Type <- 1 # 1=power, 2=log-log relationship
EstWtAtLen <- data.frame(EstFemWtAtLen=NA,
EstMalWtAtLen=NA) # weight at age, inputted as values in data frame
ReprodScale <- 1 # 1=default (standard calculations for spawning biomass), 2=hyperallometric reproductive scaling with female mass (i.e. BOFFF effects)
ReprodPattern <- 1 # 1 = gonochoristic (separate sexes), 2 = protogynous (female to male sex change), 3 = protandrous (male to female sex change)
InitRatioFem <- 0.5 # Ratio of females to males at recruitment age/length
FinalSex_L50 <- NA # Logistic sex change relationship parameters (inflection point)
FinalSex_L95 <- NA # Logistic sex change relationship parameters (95% of max probability)
EstSexRatioAtLen <- NA  # sex ratio at length inputted as vector
EggFertParam <- NA # (NA or from ~0.2-1) NA = no effect, ~0.2 = direct effect of popn. sex ratio changes on egg fertilisation rates, 1 = no effects
mat_L50 <- c(831, 831) # females, males - Logistic length (mm) at maturity relationship parameters
mat_L95 <- c(932, 932) # females, males - Logistic length (mm) at maturity relationship parameters
EstMatAtLen <- data.frame(EstFemMatAtLen=NA,
EstMalMatAtLen=NA) # maturity at length, inputted as values in data frame
L50=FittedRes3$ParamEst[2,1]
L95=FittedRes3$ParamEst[2,1] + FittedRes3$ParamEst[3,1]
sel_L50 <- c(L50, L50) # females, males - Logistic length selectivity relationship parameters
sel_L95 <- c(L95, L95) # females, males - Logistic length selectivity relationship parameters
EstGearSelAtLen <- data.frame(EstFemGearSelAtLen=NA,
EstMalGearSelAtLen=NA)
ret_Pmax <- NA # maximum retention, values lower than 1 imply discarding of fish above MLL
ret_L50 <- NA # females, males - Logistic fish retention at length parameters
ret_L95 <- NA # females, males - Logistic fish retention at length parameters
EstRetenAtLen <- data.frame(EstFemRetenAtLen=rep(1,length(midpt)),
EstMalRetenAtLen=rep(1,length(midpt)))
DiscMort <- 0 # discard mortality (e.g. 50% released fish die = 0.5)
Steepness <- 0.75 # steepness parameter of the Beverton and Holt stock-recruitment relationship
SRrel_Type <- 1 # 1 = Beverton-Holt, 2=Ricker
NatMort = 4.22 / 29 # natural mortality  (year-1)
FMort = FittedRes3$ParamEst[1,1]
Res=CalcYPRAndSPRForFMort_LB(MaxModelAge, TimeStep, lbnd, ubnd, midpt, nLenCl, GrowthCurveType, GrowthParams,
RefnceAges, CVSizeAtAge, lenwt_a, ln_lenwt_a, lenwt_b, WLrel_Type, EstWtAtLen,
ReprodScale, ReprodPattern, InitRatioFem, FinalSex_L50, FinalSex_L95, EstSexRatioAtLen,
EggFertParam, mat_L50, mat_L95, EstMatAtLen, sel_L50, sel_L95, EstGearSelAtLen, ret_Pmax,
ret_L50, ret_L95, EstRetenAtLen, DiscMort, Steepness, SRrel_Type, NatMort, FMort)
Res$Fem_SPR
Res$Eq_FemRelSpBiom
# Applying to simulated female data only
species = "red herring"; species
MyPars <- new("LB_pars")
slotNames(MyPars)
MyPars@Linf <- mean(1279, 1139)
MyPars@M <- NatMort
MyPars@MK <- MyPars@M / mean(0.188, 0.240); MyPars@MK
MyPars@L50 <- 831
MyPars@L95 <- 932
MyPars@BinWidth <- 20
MyPars@BinMax <- 1.5 * MyPars@Linf
MyPars@BinMin <- 0
MyLengths <- new("LB_lengths")
# slotNames(MyLengths)
MyLengths@LMids = midpt
MyLengths@LData = as.matrix(unlist((SimRes$ObsRetCatchFreqAtLen_Fem)))
# MyLengths@L_units
MyLengths@Years = 1
MyLengths@NYears = 1
# fit model
myFit1 <- LBSPRfit(MyPars, MyLengths)
plotSize(myFit1)
plotEsts(myFit1)
plotMat(myFit1)
myFit1@Ests
FMort
4.22/29
MySim
MySim@SSB
myFit1@FM
myFit1@SPR
LB_pars@Steepness <- 0.75
LB_pars@MK <- myFit1@MK
LB_pars@Linf <- myFit1@Linf
LB_pars@L50 <- MyPars@L50 # maturity
LB_pars@L95 <- MyPars@L95
LB_pars@SL50 <- myFit1@SL50 # selectivity
LB_pars@SL95 <- myFit1@SL95
# now, calculate Brel, using simulation function
LB_pars <- new("LB_pars")
myFit1@FM
myFit1@SPR
LB_pars@Steepness <- 0.75
LB_pars@MK <- myFit1@MK
LB_pars@Linf <- myFit1@Linf
LB_pars@L50 <- MyPars@L50 # maturity
LB_pars@L95 <- MyPars@L95
LB_pars@SL50 <- myFit1@SL50 # selectivity
LB_pars@SL95 <- myFit1@SL95
LB_pars@FM <- myFit1@FM
LB_pars@BinMax <- 1.5 * MyPars@Linf
LB_pars@BinMin <- 0
LB_pars@BinWidth <- 20
MySim <- LBSPRsim(LB_pars)
MySim@SPR
# > MySim@SPR
# [1] 0.2919096
RelBiom = (MySim@SSB/MySim@SSB0)/MySim@R0
RelBiom
MySim@R0
MySim@SSB/MySim@SSB0
remotes::install_github("r4ss/r4ss")
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
install.packages(c("lda", "mclust"))
install.packages("lda")
install.packages("survival")
install.packages("shinyalert")
install.packages("mclust")
install.packages("openssl")
remove.packages("lda")
remove.packages("mclust")
install.packages("lda")
install.packages("lda")
install.packages("mclust")
install.packages("mclust")
remove.packages("lda")
install.packages("C:/Users/Jason.Cope/Downloads/lda_1.5.2.tar.gz", repos = NULL, type = "source")
install.packages("lda")
shiny::runApp('Github/SS-DL-tool')
remotes::install_github("nmfs-fish-tools/SSMSE")
install.packages("sp")
install.packages("lda")
install.packages("mclust")
remotes::install_github("ss3sim/ss3sim")
remotes::install_github("r4ss/r4ss")
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
Female_M
Male_M = data.frame(Ages = 0:Nages(), PopN=exp(-mm.in * 0:Nages()), Sex="Male")
-mm.in
shiny::runApp('Github/SS-DL-tool')
mm.in
M_m_in()
input$male_parms
input$male_parms_SSS
input$male_parms_fix
input$male_parms_est
all(c(is.null(input$M_m),is.null(input$M_m_fix),is.null(input$M_m_mean),is.null(input$M_m_mean_sss)))
any(input$male_parms_fix&!is.na(input$M_m_fix))
is.null(input$M_m)
input$M_m_fix
input$M_m_mean
input$M_m_mean_sss
input$M_m
M_m_in()
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
Linf_m_in()
k_vbgf_m_in()
t0_vbgf_m_in()
(any(input$male_parms,input$male_parms_SSS,input$male_parms_fix,input$male_parms_est)
)
input$male_parms
input$male_parms_SSS
input$male_parms_fix
any(Linf_m_in(),k_vbgf_m_in(),t0_vbgf_m_in())
all(Linf_m_in(),k_vbgf_m_in(),t0_vbgf_m_in())
is.na(Linf_m_in(),k_vbgf_m_in(),t0_vbgf_m_in())
input$male_parms_SSS
Linf_m_in()
Linf_m_in()>0
is.numeric(Linf_m_in())
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
install.packages("duckdb")
install.packages("fpc")
remotes::install_github("r4ss/r4ss")
# load pkgs set options ----
#devtools::install_github("r4ss/r4ss", ref = "155a521")
#devtools::install_github("nmfs-fish-tools/SSMSE@v0.2.5")
library(SSMSE)
library(r4ss)
# specify locations, create folders ----
mod_path <- "C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1/"
datfile_path <- file.path(mod_path, "datafile.dat")
fig_path <- "figures"
runs_path <- "model_runs"
mods_path <- "input_models"
dir.create(fig_path)
dir.create(runs_path)
dir.create(mods_path)
getwd()
fig_path <- file.path(mod_path,"figures")
runs_path <- file.path(mod_path,"model_runs")
mods_path <- file.path(mod_path,"input_models")
dir.create(fig_path)
dir.create(runs_path)
dir.create(mods_path)
fig_path <- file.path(mod_path,"MSE/figures")
runs_path <- file.path(mod_path,"MSE/model_runs")
mods_path <- file.path(mod_path,"MSE/input_models")
dir.create(fig_path)
dir.create(runs_path)
dir.create(mods_path)
fig_path
datfile_path
# specify locations, create folders ----
mod_path <- "C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1"
datfile_path <- file.path(mod_path, "datafile.dat")
fig_path <- file.path(mod_path,"MSE/figures")
# specify locations, create folders ----
mod_path <- "C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1"
datfile_path <- file.path(mod_path, "datafile.dat")
fig_path <- file.path(mod_path,"MSE/figures")
runs_path <- file.path(mod_path,"MSE/model_runs")
mods_path <- file.path(mod_path,"MSE/input_models")
dir.create(fig_path)
dir.create(file.path(mod_path,"MSE"))
dir.create(fig_path)
dir.create(runs_path)
dir.create(mods_path)
# define the scenarios ----
niters <- 100
shiny::runApp('Github/SS-DL-tool')
pak::pkg_install(
pkg = "ss3sim/ss3sim",
# pkg = "ss3sim" # CRAN version
dependencies = TRUE
)
# Use the boiler-plate data frame available in {ss3sim} for 2 scenarios
df <- setup_scenarios_defaults(nscenarios = 2)
library("ss3sim")
simdf <- setup_scenarios_defaults()
simdf
i
# Use the boiler-plate data frame available in {ss3sim} for 2 scenarios
df <- setup_scenarios_defaults(nscenarios = 2)
df
# Display the default fishing mortality settings
df[, grep("^cf\\.", colnames(df))]
?unlink
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
install.packages(c("BiocManager", "estimability", "farver", "flextable", "insight", "officer", "pixmap", "polspline", "R2jags", "ragg", "RcppArmadillo", "rfishbase", "sjmisc", "stringi", "tinytex"))
shiny::runApp('Github/SS-DL-tool')
remotes::install_github("r4ss/r4ss")
remotes::install_github("chantelwetzel-noaa/HandyCode")
remotes::install_github("nwfsc-assess/nwfscDiag")
install.packages("TMB")
library(openMSE)
res <- SCA(Data = MSEtool::SimulatedData)
res
names(res)
attributes(res)
slots(res)
Slots(res)
MSEtool::SimulatedData
ourOM <- new('OM', Albacore, Generic_IncE, Imprecise_Unbiased, Perfect_Imp)
ourOM
slotNames(ourOM)
ourOM@LFR
ourOM@M
ourOM@nsim
ourOM@maxage
ourOM@D
shiny::runApp('Github/SS-DL-tool')
runApp('C:/Users/Jason.Cope/Downloads/FPAT-master/FPAT-master/inst/shiny_apps/FPAT')
install.packages("shinydashboardPlus")
runApp('C:/Users/Jason.Cope/Downloads/FPAT-master/FPAT-master/inst/shiny_apps/FPAT')
#' Run the FPAT Application
#'
#' \code{FPAT} runs the FPAT Shiny Application
#'
#' @references Modified from Deal Attali's code: \url{http://deanattali.com/2015/04/21/r-package-shiny-app/}
#' @importFrom utils install.packages installed.packages
#' @export
FPAT <- function(app="FPAT", ...) {
temp <- try(class(app), silent=TRUE)
if (class(temp) == "try-error") app <- deparse(substitute(app))
Apps <- list.files(system.file("shiny_apps", package = "FPAT"))
validAppMsg <- paste0("Valid examples are:\n '", paste(Apps, collapse = "', '"), "'")
appDir <- system.file("shiny_apps", app, package = "FPAT")
shiny::runApp(appDir, display.mode = "normal",launch.browser = TRUE, ...)
}
runApp('C:/Users/Jason.Cope/Downloads/FPAT-master/FPAT-master/inst/shiny_apps/FPAT')
RelBiom
shiny::runApp('Github/SS-DL-tool')
