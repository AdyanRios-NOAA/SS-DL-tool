ylim(0,1.5)+
geom_text_repel(show.legend = FALSE,aes(label = Abb2))+
#theme_minimal()+
theme_light()+
theme(legend.title=element_blank())+
labs(x=expression(bold("Relative Stock Status")),y=expression(bold("Fishing Intensity")))+
geom_vline(xintercept = c(0.5,0.62,1),lty=c(1,1,2),col=c("red","red","black"),lwd=c(1.25,1.25,1))+
geom_hline(yintercept = 1,lty=2)+
guides(shape = guide_legend(override.aes = list(size = 4)))+
#geom_text(aes(1,1.5,color="black",label="TRP",angle=90,vjust=1.1,size=1.1))
geom_text(aes(0.625,1.35,label="LRP: Rockfishes",angle=90,vjust=1,size=1.1))+
geom_text(aes(0.5,1.4,label="LRP: Flatfishes",angle=90,vjust=-0.1,size=1.1))
runApp('Github/Fisheries-Shiny-App')
?geom_text
ggplot(quad.plot.WC,aes(B.Bmsy,F.Fmsy, label=Abb1,color=Spp_type,shape=Spp_type))+
geom_point()+
xlim(0,4)+
ylim(0,4.1)+
geom_text_repel(show.legend = FALSE,aes(label = Abb2))+
#theme_minimal()+
theme_light()+
theme(legend.title=element_blank())+
labs(x=expression(bold("Relative Stock Status")),y=expression(bold("Fishing Intensity")))+
geom_vline(xintercept = c(0.5,0.62,1),lty=c(1,1,2),col=c("red","red","black"),lwd=c(1.25,1.25,1))+
geom_hline(yintercept = 1,lty=2)+
guides(shape = guide_legend(override.aes = list(size = 4)))+
#geom_text(aes(1,1.5,color="black",label="TRP",angle=90,vjust=1.1,size=1.1))
geom_text(aes(0.625,1.35,label="LRP: Rockfishes",angle=90,vjust=1,size=1.1))+
geom_text(aes(0.5,1.4,label="LRP: Flatfishes",angle=90,vjust=-0.1,size=1.1))
ggplot(quad.plot.WC,aes(B.Bmsy,F.Fmsy, label=Abb1,color=Spp_type,shape=Spp_type))+
geom_point()+
xlim(0,4)+
ylim(0,1.5)+
geom_text_repel(show.legend = FALSE,aes(label = Abb2))+
#theme_minimal()+
theme_light()+
theme(legend.title=element_blank())+
labs(x=expression(bold("Relative Stock Status")),y=expression(bold("Fishing Intensity")))+
geom_vline(xintercept = c(0.5,0.62,1),lty=c(1,1,2),col=c("red","red","black"),lwd=c(1.25,1.25,1))+
geom_hline(yintercept = 1,lty=2)+
guides(shape = guide_legend(override.aes = list(size = 4)))+
#geom_text(aes(1,1.5,color="black",label="TRP",angle=90,vjust=1.1,size=1.1))
geom_text(aes(0.625,1.35,label="LRP: Rockfishes",angle=90,vjust=1,size=1.1))+
geom_text(aes(0.5,1.4,label="LRP: Flatfishes",angle=90,vjust=-0.1,size=1.1))
runApp('Github/Fisheries-Shiny-App')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
library(ggplot2)
library(ggbreak)
install.packages("ggbreak")
library(ggbreak)
gf=quad.plot.WC<-data.frame(read.csv("C:/Users/Jason.Cope/Desktop/quadplot/2023/WC_quadplot_2023.csv"))
#gf = data.frame(read.csv( "WC_quadplot_2023_FY2024.csv" , header = TRUE))
# update the plotted data file
update_plotted(gf_file)
spp = levels(factor(gf$Abb2))
for( i in 1:length(spp)){
df = gf[gf$Abb2 == spp[i],]
df = df[df$Assessment_Year == max(df$Assessment_Year), ]
if(i == 1){DF = df}else{DF = data.frame(rbind(DF,df))}
}
DF$Abb1 = stringr::str_replace_all(DF$Abb1, "_", " ")
DF$Abb1 = stringr::str_replace_all(DF$Abb1, "_", " ")
DF$Abb2 = stringr::str_replace_all(DF$Abb2, "_", " ")
# plot names for just quillbacks
df_short = DF[DF$Abb2 %in% c('Quillback CA','Quillback OR'),]
# DF = DF[DF$F.Fmsy < 2.0,]
df_short$x = df_short$B.Bmsy + 0.8
color_scheme = RColorBrewer::brewer.pal(n = 12, name = "Paired")[c(2,4,6)]
groundfish_status_full <- ggplot(DF, aes(x = B.Bmsy, y = F.Fmsy,
label = Abb2, colour = factor(Spp_type), fill = factor(Spp_type))) +
geom_point( size=1 , shape= 21 )+
geom_text(data=df_short, aes(x = x, y = F.Fmsy, label = Abb2), size = 3)+
scale_fill_manual(values = color_scheme)+
scale_color_manual(values= color_scheme)+
xlab("") +
ylab("") +
geom_segment(aes(x = 1, y = 0, xend=1, yend=4), colour='black', size = 1, linetype=3) +
geom_segment(aes(x = 0, y = 1, xend=4, yend=1), colour='black', size = 1, linetype=3) +
geom_segment(aes(x = 0.500, y = 0, xend=0.500, yend=4), colour=color_scheme[1], size = 1, linetype=1) +
geom_segment(aes(x = 0.625, y = 0, xend=0.625, yend=4), colour=color_scheme[3], size = 1, linetype=1) +
# geom_text(x=0.4, y=2, label="Flatfishes", color = color_scheme[1], angle = 90) +
# geom_text(x=0.7, y=2, label="Scorpaenids and Other", color = color_scheme[3], angle = 90) +
theme_classic() +
theme(legend.title = element_blank(), legend.position = "none",#c(0.9, 0.9),
axis.line =  element_line(colour = "grey", size = 1, linetype = "solid"),
axis.ticks = element_line(colour = "grey"),
axis.text =  element_text(colour = "grey") )
groundfish_status_full
6*8
usethis::edit_r_profile()
exp(0)
exp(-0.9)
exp(-0.02)
exp(-0.01)
exp(-0.1)
exp(-0.15)
exp(-0.12)
exp(-0.2)
exp(-2.65532)
195*150
195*155
#' Get FishLife life history traits
#'
#' Retrieves life history trait predictions from FishLife (Thorson et al. 2018). This
#' is a wrapper for the Plot_taxa() function in the FishLife R package.
#'
#' @param species A character vector of species scientific names
#' @return A dataframe with life history trait predictions from FishLife for each species
#' @examples
#' # Look up life history traits
#' species <- c("Gadus morhua", "Centropristis striata", "Paralichthys dentatus")
#' fishlife(species)
#' @export
fishlife <- function(species){
# Setup container
spp <- sort(unique(species))
fl <- data.frame(species=spp, linf_cm=NA, k=NA, winf_g=NA, tmax_yr=NA, tmat_yr=NA,
m=NA, lmat_cm=NA, temp_c=NA, stringsAsFactors=F)
# Loop through species
for(i in 1:nrow(fl)){
# Get spp info
sciname <- fl$species[i]
genus <- stringr::word(sciname, 1)
nwords_in_spp <- length(strsplit(sciname, " ")[[1]])
species <- stringr::word(sciname, start=2, end=nwords_in_spp)
species <- ifelse(species=="spp", "predictive", species)
# Try looking up in FishLife
spp_info <- try(FishLife::Plot_taxa(FishLife::Search_species(Genus=genus, Species=species)$match_taxonomy))
if(inherits(spp_info, "try-error")){
# Record blanks
#      fl[i,2:ncol(fl)] <- rep(NA, ncol(fl)-1)
}else{
# Values are in log-scale except temperature
spp_lh_vals_log <- spp_info[[1]]$Mean_pred
spp_lh_vals <- c(exp(spp_lh_vals_log[1:7]), spp_lh_vals_log[8],spp_lh_vals_log[9:20])
#     fl[i,2:ncol(fl)] <- spp_lh_vals
}
}
# Return
#  return(fl)
return(spp_lh_vals)
}
fishlife("Sebastes ruberrimus")
fishlife("Sebastes paucuspinus")
exp(0.05)
exp(0.04917)
fishlife("Sebastes paucispinis")
fishlife("Sebastes melanops")
#' Retrieves life history trait predictions from FishLife (Thorson et al. 2018). This
#' is a wrapper for the Plot_taxa() function in the FishLife R package.
#'
#' @param species A character vector of species scientific names
#' @return A dataframe with life history trait predictions from FishLife for each species
#' @examples
#' # Look up life history traits
#' species <- c("Gadus morhua", "Centropristis striata", "Paralichthys dentatus")
#' fishlife(species)
#' @export
fishlife <- function(species){
# Setup container
spp <- sort(unique(species))
fl <- data.frame(species=spp, linf_cm=NA, k=NA, winf_g=NA, tmax_yr=NA, tmat_yr=NA,
m=NA, lmat_cm=NA, temp_c=NA, stringsAsFactors=F)
# Loop through species
for(i in 1:nrow(fl)){
# Get spp info
sciname <- fl$species[i]
genus <- stringr::word(sciname, 1)
nwords_in_spp <- length(strsplit(sciname, " ")[[1]])
species <- stringr::word(sciname, start=2, end=nwords_in_spp)
species <- ifelse(species=="spp", "predictive", species)
# Try looking up in FishLife
spp_info <- try(FishLife::Plot_taxa(FishLife::Search_species(Genus=genus, Species=species)$match_taxonomy))
if(inherits(spp_info, "try-error")){
# Record blanks
#      fl[i,2:ncol(fl)] <- rep(NA, ncol(fl)-1)
}else{
# Values are in log-scale except temperature
spp_lh_vals_log <- spp_info[[1]]$Mean_pred
spp_lh_vals <- c(exp(spp_lh_vals_log[1:7]), spp_lh_vals_log[8],spp_lh_vals_log[9:20])
#     fl[i,2:ncol(fl)] <- spp_lh_vals
}
}
# Return
#  return(fl)
return(spp_lh_vals)
}
fishlife("Sebastes rastrelliger")
shiny::runApp('Github/Natural-Mortality-Tool')
source("~/Github/SS-DL-tool/Example data files/FishLife code/fishlife_update.r")
fishlife("Sebastes caurinus")
fishlife("Oncorhynchus tshawytscha")
fishlife("Paralichthys californicus")
fishlife("Oncorhynchus tshawytscha")
fishlife("Oncorhynchus tshawytscha")
shiny::runApp('Github/SACTool')
runApp('Github/SACTool')
runApp('Github/SACTool')
runApp('Github/SACTool')
runApp('Github/SACTool')
runApp('Github/SACTool')
runApp('Github/SACTool')
runApp('Github/SACTool')
runApp('Github/SACTool')
runApp('Github/SACTool')
runApp('Github/SACTool')
?identical
pathModelout.dir
identical(2=2)
identical(2,2)
runApp('Github/SACTool')
runApp('Github/SACTool')
runApp('Github/SACTool')
runApp('Github/SACTool')
runApp('Github/SACTool')
file.copy(paste0("Scenarios/",input$Scenario_name), input$Folder_path,recursive=TRUE,overwrite=TRUE)
runApp('Github/SACTool')
runApp('Github/SACTool')
source("~/Github/SS-DL-tool/Example data files/FishLife code/fishlife_update.r")
fishlife("Sebastes mystinus")
fishlife("Sebastes ruberrimus")
load("Downloads/Mcomposite_samplesThu Jan 11 2024 074900 PM")
runApp('Github/Natural-Mortality-Tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
source("~/Github/SS-DL-tool/Example data files/FishLife code/fishlife_update.r")
fishlife("Selar crumenophthalmus")
fishlife("Decapterus tabl")
fishlife("Decapterus macrosoma")
17/0.66
runApp('Github/Natural-Mortality-Tool')
exp(-0.2)
200/8
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
library(fishmethods)
#Read in data
Dir<-("C:/Users/Jason.Cope/Desktop/SAFS FISH 551/FISH 551 SAFS 2024/Exercises/Length-based")
Spp_ltcomps<-read.csv(paste0(Dir,"/Spp_Ltcomps.csv"))
Spp_ltcomps_unwt<-Spp_ltcomps[,1:10]
#Do for all years
Zcalc_lts<-function(LtData,K.in,Linf.in,Lc_in,nboot.in=200)
{
Mean_lt_Z_se<-Mean_lt_Z<-rep(NA,(dim(LtData)[2]-1))
for(i in 1:(dim(LtData)[2]-1))
{
#Convert data in individual lengths
Ltdata_ind<-rep(LtData[,1], LtData[,i+1])
#Creat histogram to prepare mode
hist_lts<-hist(Ltdata_ind,breaks=seq(1,200,1),plot=FALSE)
Lc_in<-hist_lts$mids[hist_lts$density==max(hist_lts$density)]
Mean_lt<-bheq(Ltdata_ind,type=1,K=K.in,Linf=Linf.in,Lc=Lc_in,nboot=nboot.in)
Mean_lt_Z[i]<-Mean_lt$z
Mean_lt_Z_se[i]<-Mean_lt$SE
}
Z.out<-data.frame(Z=Mean_lt_Z,Z_se=Mean_lt_Z_se)
return(Z.out)
}
Spp.Zs<-Zcalc_lts(Spp_ltcomps_unwt,K.in=0.11,Linf.in=146)
Spp.Zs
SimLenAndAgeFreqData()
library(L3Assess)
SimLenAndAgeFreqData()
?GetAgeAndLengthBasedCatchCurveResults
devtools::install_github("SAlexHesp/L3AssessRPackage", build_vignettes=TRUE, force=TRUE)
set.seed(123)
SampleSize=10000
MaxAge = 20
TimeStep = 1 # model timestep (e.g. 1 = annual, 1/12 = monthly)
NatMort = 0.2
FishMort = 0.2
MaxLen = 1000
LenInc = 20
midpt = seq(0,MaxLen - LenInc, LenInc) + (LenInc/2)
MLL=NA # (minimum legal length) # retention set to 1 for all lengths if MLL set to NA, otherwise retention is knife-edged at MLL
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
L50 = 300 # selectivity
L95 = 500 # selectivity
SelectivityVec = NA # selectivity vector
DiscMort = 0.5
GrowthCurveType = 1 # 1 = von Bert, 2 = Schnute
Linf = 800
vbK = 0.2
CVSizeAtAge = 0.08
GrowthParams = c(Linf, vbK)
RefnceAges = NA
Res=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
L50, L95, SelectivityVec, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
library(L3Assess)
set.seed(123)
SampleSize=10000
MaxAge = 20
TimeStep = 1 # model timestep (e.g. 1 = annual, 1/12 = monthly)
NatMort = 0.2
FishMort = 0.2
MaxLen = 1000
LenInc = 20
midpt = seq(0,MaxLen - LenInc, LenInc) + (LenInc/2)
MLL=NA # (minimum legal length) # retention set to 1 for all lengths if MLL set to NA, otherwise retention is knife-edged at MLL
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
L50 = 300 # selectivity
L95 = 500 # selectivity
SelectivityVec = NA # selectivity vector
DiscMort = 0.5
GrowthCurveType = 1 # 1 = von Bert, 2 = Schnute
Linf = 800
vbK = 0.2
CVSizeAtAge = 0.08
GrowthParams = c(Linf, vbK)
RefnceAges = NA
Res=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
L50, L95, SelectivityVec, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
Res
lbnd=Res$lbnd
midpt=Res$midpt
ubnd=Res$ubnd
# # get data - 1 sex (or combined sexes)
# ObsCatchFreqAtLen = Res$ObsCatchFreqAtLen # 1 sex
# ObsCatchFreqAtLengthAndAge = as.matrix(Res$ObsCatchFreqAtLengthAndDecAge) # 1 sex
# get data - 2 sexes
ObsCatchFreqAtLen <- data.frame(matrix(nrow = 2, ncol = length(midpt))) # 2 sex
colnames(ObsCatchFreqAtLen) <- midpt
ObsCatchFreqAtLen[1,] = Res$ObsCatchFreqAtLen_Fem
ObsCatchFreqAtLen[2,] = Res$ObsCatchFreqAtLen_Mal
ObsCatchFreqAtLengthAndAge = array(c(unlist(Res$ObsCatchFreqAtLengthAndDecAge_Fem), unlist(Res$ObsCatchFreqAtLengthAndDecAge_Mal)),
c(nTimeSteps, length(midpt), 2), dimnames=list(rownames(Res$ObsCatchFreqAtLengthAndDecAge_Fem),
colnames(Res$ObsCatchFreqAtLengthAndDecAge_Fem)))
set.seed(123)
# Simulate data
SampleSize=5000
set.seed(123)
MaxAge = 26
TimeStep = 1 # model timestep (e.g. 1 = annual, 1/12 = monthly)
MinAge = floor(TimeStep)
nAgeCl = length(MinAge:MaxAge)
nTimeSteps = length(seq(TimeStep,MaxAge,TimeStep))
NatMort = 4.22/MaxAge
FishMort = 0.2
MaxLen = 1100
LenInc = 10
MLL = NA
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
L50 = 400 # selectivity
L95 = 450 # selectivity
SelectivityVec = NA
DiscMort = 0
# # single sex, von Bertalanffy
# GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute (no yet implemented for this method)
# Linf = 800
# vbK = 0.2
# CVSizeAtAge = 0.08
# GrowthParams = c(Linf, vbK)
# RefnceAges = NA
# 2 sexes, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy, 2 = Schnute (no yet implemented for this method)
Linf = c(700,850)
vbK = c(0.25,0.2)
CVSizeAtAge = c(0.05,0.05)
RefnceAges = NA
GrowthParams = data.frame(Linf=Linf, vbK=vbK)
Res=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
L50, L95, SelectivityVec, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
lbnd=Res$lbnd
midpt=Res$midpt
ubnd=Res$ubnd
# # get data - 1 sex (or combined sexes)
# ObsCatchFreqAtLen = Res$ObsCatchFreqAtLen # 1 sex
# ObsCatchFreqAtLengthAndAge = as.matrix(Res$ObsCatchFreqAtLengthAndDecAge) # 1 sex
# get data - 2 sexes
ObsCatchFreqAtLen <- data.frame(matrix(nrow = 2, ncol = length(midpt))) # 2 sex
colnames(ObsCatchFreqAtLen) <- midpt
ObsCatchFreqAtLen[1,] = Res$ObsCatchFreqAtLen_Fem
ObsCatchFreqAtLen[2,] = Res$ObsCatchFreqAtLen_Mal
ObsCatchFreqAtLengthAndAge = array(c(unlist(Res$ObsCatchFreqAtLengthAndDecAge_Fem), unlist(Res$ObsCatchFreqAtLengthAndDecAge_Mal)),
c(nTimeSteps, length(midpt), 2), dimnames=list(rownames(Res$ObsCatchFreqAtLengthAndDecAge_Fem),
colnames(Res$ObsCatchFreqAtLengthAndDecAge_Fem)))
# # get params - 1 sex
# InitFishMort = 0.3 # specify starting parameters
# InitL50 = 300
# InitL95 = 500
# InitLinf = 800
# InitvbK = 0.2
# InitCVSizeAtAge = 0.05
# get params - 2 sexes
InitFishMort = 0.3 # specify starting parameters
InitL50 = 300
InitL95 = 500
InitLinf = c(800,800)
InitvbK = c(0.25,0.25)
InitCVSizeAtAge = 0.05
InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform (so F is always between 0 and 1)
params = c(InitFishMort_logit, log(c(InitL50, InitL95, InitLinf, InitvbK, InitCVSizeAtAge)))
FittedRes=GetAgeAndLengthBasedCatchCurveResults(params, MLL, SelectivityType, ObsCatchFreqAtLen, ObsCatchFreqAtLengthAndAge,
lbnd, ubnd, midpt, SelectivityVec, DiscMort, MaxAge, NatMort, TimeStep)
# plot
PlotAgeLengthCatchCurve_Growth(params, MLL, SelectivityType, ObsCatchFreqAtLen, ObsCatchFreqAtLengthAndAge,
lbnd, ubnd, midpt, SelectivityVec, DiscMort, MaxAge, NatMort, TimeStep, MainLabel=NA,
xaxis_lab=NA, yaxis_lab=NA, xmax=40, xint=10,
ymax=1000, yint=200, PlotCLs=TRUE, FittedRes, nReps=200)
set.seed(123)
# Simulate data
SampleSize=5000
set.seed(123)
MaxAge = 26
TimeStep = 1 # model timestep (e.g. 1 = annual, 1/12 = monthly)
MinAge = floor(TimeStep)
nAgeCl = length(MinAge:MaxAge)
nTimeSteps = length(seq(TimeStep,MaxAge,TimeStep))
NatMort = 4.22/MaxAge
FishMort = 0.2
MaxLen = 1100
LenInc = 10
MLL = NA
SelectivityType=2 # 1=selectivity inputted as vector, 2=asymptotic logistic selectivity curve
L50 = 400 # selectivity
L95 = 450 # selectivity
SelectivityVec = NA
DiscMort = 0
# # single sex, von Bertalanffy
# GrowthCurveType = 1 # 1 = von Bertalanffy
# Linf = 800
# vbK = 0.2
# CVSizeAtAge = 0.08
# GrowthParams = c(Linf, vbK, CVSizeAtAge)
# RefnceAges = NA
# 2 sexes, von Bertalanffy
GrowthCurveType = 1 # 1 = von Bertalanffy
Linf = c(700,850)
vbK = c(0.25,0.2)
CVSizeAtAge = c(0.05,0.05)
RefnceAges = NA
GrowthParams = data.frame(Linf=Linf, vbK=vbK, CVSizeAtAge=CVSizeAtAge)
Res=SimLenAndAgeFreqData(SampleSize, MaxAge, TimeStep, NatMort, FishMort, MaxLen, LenInc, MLL, SelectivityType,
L50, L95, SelectivityVec, DiscMort, GrowthCurveType, GrowthParams, RefnceAges, CVSizeAtAge)
lbnd=Res$lbnd
midpt=Res$midpt
ubnd=Res$ubnd
# # get data - 1 sex (or combined sexes)
# ObsCatchFreqAtLen = Res$ObsCatchFreqAtLen # 1 sex
# ObsCatchFreqAtLengthAndAge = as.matrix(Res$ObsCatchFreqAtLengthAndDecAge) # 1 sex
# get data - 2 sexes
ObsCatchFreqAtLen <- data.frame(matrix(nrow = 2, ncol = length(midpt))) # 2 sex
colnames(ObsCatchFreqAtLen) <- midpt
ObsCatchFreqAtLen[1,] = Res$ObsCatchFreqAtLen_Fem
ObsCatchFreqAtLen[2,] = Res$ObsCatchFreqAtLen_Mal
ObsCatchFreqAtLengthAndAge = array(c(unlist(Res$ObsCatchFreqAtLengthAndDecAge_Fem), unlist(Res$ObsCatchFreqAtLengthAndDecAge_Mal)),
c(nTimeSteps, length(midpt), 2), dimnames=list(rownames(Res$ObsCatchFreqAtLengthAndDecAge_Fem),
colnames(Res$ObsCatchFreqAtLengthAndDecAge_Fem)))
# # get params - 1 sex
# InitFishMort = 0.3 # specify starting parameters
# InitL50 = 300
# InitL95 = 500
# InitLinf = 800
# InitvbK = 0.2
# InitCVSizeAtAge = 0.05
# get params - 2 sexes
InitFishMort = 0.3 # specify starting parameters
InitL50 = 300
InitL95 = 500
InitLinf = c(800,800)
InitvbK = c(0.25,0.25)
InitCVSizeAtAge = 0.05
InitFishMort_logit = log(InitFishMort/(1-InitFishMort)) # logit transform (so F is always between 0 and 1)
params = c(InitFishMort_logit, log(c(InitL50, InitL95, InitLinf, InitvbK, InitCVSizeAtAge)))
FittedRes=GetAgeAndLengthBasedCatchCurveResults(params, MLL, SelectivityType, ObsCatchFreqAtLen, ObsCatchFreqAtLengthAndAge,
lbnd, ubnd, midpt, SelectivityVec, DiscMort, MaxAge, NatMort, TimeStep)
FittedRes
attributes(FittedRes)
FittedRes$ParamEst
shiny::runApp('C:/Users/Jason.Cope/Desktop/SAFS FISH 551/FISH 551 SAFS 2024/Exercises/PSA')
shiny::runApp('C:/Users/Jason.Cope/Desktop/SAFS FISH 551/FISH 551 SAFS 2024/Exercises/PSA')
library(fishmethods)
#Read in data
Dir<-("C:/Users/Jason.Cope/Desktop/SAFS FISH 551/FISH 551 SAFS 2024/Exercises/Length-based")
Spp_ltcomps<-read.csv(paste0(Dir,"Spp_Ltcomps.csv"))
#Do for all years
Zcalc_lts<-function(LtData,K.in,Linf.in,Lc_in,nboot.in=200)
{
Mean_lt_Z_se<-Mean_lt_Z<-rep(NA,(dim(LtData)[2]-1))
for(i in 1:(dim(LtData)[2]-1))
{
#Convert data in individual lengths
Ltdata_ind<-rep(LtData[,1], LtData[,i+1])
#Creat histogram to prepare mode
hist_lts<-hist(Ltdata_ind,breaks=seq(1,200,1),plot=FALSE)
Lc_in<-hist_lts$mids[hist_lts$density==max(hist_lts$density)]
Mean_lt<-bheq(Ltdata_ind,type=1,K=K.in,Linf=Linf.in,Lc=Lc_in,nboot=nboot.in)
Mean_lt_Z[i]<-Mean_lt$z
Mean_lt_Z_se[i]<-Mean_lt$SE
}
Z.out<-data.frame(Z=Mean_lt_Z,Z_se=Mean_lt_Z_se)
return(Z.out)
}
Spp.Zs<-Zcalc_lts(Spp_ltcomps_unwt,K.in=0.11,Linf.in=146)
Spp.Zs
Spp.Zs[,1]-0.2
(Spp.Zs[,1]-0.2)/0.2
plot((Spp.Zs[,1]-0.2)/0.2)
abline(h=1,col="red")
plot((Spp.Zs[,1]-0.2)/0.2)
runApp('Github/SS-DL-tool')
# Look up life history traits
source("~/Github/SS-DL-tool/Example data files/FishLife code/fishlife_update.r")
fishlife("Sebastes ruberrimus")
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
