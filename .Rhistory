paste0(p,"/file.summary.out.log")
xx<-read(paste0(p,"/file.summary.out.log"))
?read
?read.txt
?read.text
?load
xx<-read.delim(paste0(p,"/file.summary.out.log"))
xx
?read.delim
?capture.output
clse()
cl0se()
close()
dev.off*()
dev.off()
utils::capture.output(summary(fit_model), file=NULL)
fit.mod.summary<-utils::capture.output(summary(fit_model), file=NULL)
fit.mod.summary
print(fit.mod.summary)
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?dir.create
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
dir.exists("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1_RWM")
dir.exists("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1_RWM")
shiny::runApp('Github/SS-DL-tool')
dir.exists(file.path(modeff.dir,modeff.name)
)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
print(fit.mod.summary.out)
fit.mod.summary
utils::capture.output(summary(fit_model), file=NULL)
utils::capture.output(summary(fit_model), file=NULL)
fit.mod.summary
fit.mod.summary[1]
print(fit.mod.summary)
print(fit.mod.summary)
shiny::runApp('Github/SS-DL-tool')
paste0(fit.mod.summary[1],fit.mod.summary[2],fit.mod.summary[3])
?launch_shinyadmb
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?try
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
debug(SSexecutivesummary)
Get.Values(replist = replist, label = sb.name,
years, ci_value)
Q
SSexecutivesummary
edit(SSexecutivesummary)
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('TestDeployment')
runApp('Github/Natural-Mortality-Tool')
?adnuts
?sample_nuts
library(adnuts)
?sample_nuts
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
load("C:/Users/Jason.Cope/Desktop/Black rockfish 2022/Data/WA/Indices/Nearshore Dive Survey/Black_rockfish_OCNMS_indices.Rdata")
ls()
dat.bk.summary <- dat.bk %>% filter(size_class=="large")
library(tidyverse)
library(xtable)
library(terra)
library(ggplot2)
library(maps)
library(mapdata)
library(mapproj)
dat.bk <- dat.fish %>% filter(species %in% c("SEME")) %>%
bind_rows(.,
dat.fish %>% filter(size_class %in% c("small")))
ls*()
ls()
bk.rockfish.output
install.packages(c("admisc", "BiocManager", "bookdown", "broom", "bslib", "cachem", "checkmate", "chk", "chron", "class", "cli", "clock", "cpp11", "crul", "curl", "datamods", "datawizard", "dbplyr", "deldir", "DEoptimR", "DescTools", "deSolve", "DiagrammeR", "digest", "dismo", "downlit", "DT", "duckdb", "emmeans", "EnvStats", "evaluate", "fauxpas", "fda", "fishmethods", "flextable", "fs", "future", "future.apply", "gargle", "gdata", "GenSA", "ggdist", "ggeffects", "ggfun", "ggimage", "ggnewscale", "ggplotify", "gifski", "gmm", "googledrive", "googlesheets4", "graphlayouts", "gss", "h2o", "haven", "Hmisc", "httpuv", "httr", "httr2", "igraph", "influenceR", "insight", "jsonlite", "KernSmooth", "knitr", "kutils", "lares", "later", "lme4", "locfit", "maptools", "markdown", "MASS", "Matrix", "MatrixModels", "matrixStats", "measurements", "mgcv", "microbenchmark", "mirt", "multcomp", "mvtnorm", "nnet", "pak", "parallelly", "pbapply", "phosphoricons", "pkgbuild", "pkgcache", "pkgload", "plotly", "polspline", "pROC", "processx", "profvis", "pscl", "psych", "qgraph", "quanteda", "quanteda.textstats", "quantmod", "qvcalc", "raster", "Rcpp", "RcppArmadillo", "readxl", "renv", "reticulate", "rfishbase", "rgdal", "rgeos", "rgl", "rlang", "rmarkdown", "rms", "rnaturalearth", "robustbase", "rrcov", "rstudioapi", "rticles", "rvg", "s2", "sass", "scatterplot3d", "servr", "sf", "shiny", "ShinyItemAnalysis", "sp", "spData", "StanHeaders", "statnet.common", "styler", "survey", "sys", "tables", "terra", "testthat", "timeSeries", "tseries", "tzdb", "units", "usethis", "V8", "vcr", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "webshot", "wk", "xml2"))
shiny::runApp('Github/SS-DL-tool')
remove.packages("ragg")
install.packages("ragg")
install.packages("class")
library(r4ss)
remove.packages("r4ss")
remotes::install_github("r4ss/r4ss")
remotes::install_github("r4ss/r4ss")
remotes::install_github("r4ss/r4ss")
shiny::runApp('Github/SS-DL-tool')
?bsTooltip
bsExample("Tooltips_and_Popovers")
?bsTooltip
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/wcgfishSAP')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
?if_else
x <- c(-5:5, NA)
if_else(x < 0, NA, x)
x <- c(-5:5, NA)
if_else(x < 0, NA, x)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/wcgfishSAP')
runApp('Github/wcgfishSAP')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
rv.Lt$data$value
rv.Lt$data
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
Age.comp.data_female
Age.comp.data_female[,1]
age_yrsfleet_females
yrsfleet_females<
yrsfleet_females
age_sex3_match_female
age_sex3_match_male
Age.comp.data_female_sex3
Age.comp.data_male_sex3
dim(Age.comp.data_male_sex3)
dim(Age.comp.data_female_sex3)
age.data.females
age.data.males
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
age.data.sex3
na.omit(rbind(age.data.females,age.data.males,age.data.unknowns,age.data.sex3))
dim(age.data.sex3)
age.data.sex3
age.data.sex3
age.data.sex3
age.data.names
age.data.names
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
age.data.sex3
dim(age.data.sex3)
age.data.names
dim(age.data.sex3)
Q
shiny::runApp('Github/SS-DL-tool')
age.data.sex3
Age.comp.data_male_sex3
Age.comp.data_female_sex3[,5]
Age.comp.data_male_sex3[,4]
Age.comp.data_female_sex3[1,]
Age.comp.data_male[1,]
paste0(Age.comp.data_female[,1],Age.comp.data_female[,3],Age.comp.data_female[,6])
Age.comp.data_male[1,]
Age.comp.data_female_sex3[1,]
Age.comp.data_female_sex3[1,]
Age.comp.data_male_sex3[1,]
Lt.comp.data_male_sex3
Lt.comp.data_male_sex3[1,]
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
catch.fleets
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
data.file$Nfleets
Q
Q
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
input$Sex3
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
profile <- profile(
dir = profile_dir, # directory
#globalpar = TRUE,
oldctlfile = ctlfile.in,
newctlfile = "control_modified.ss",
string = prof_parms_names,
profilevec = par.df,
extras = "-nohess",
prior_check=FALSE,
show_in_console = TRUE
)
try(SSplotComparisons(profilesummary, legendlabels = modelnames, ylimAdj = 1.30, new = FALSE,plot=FALSE,print=TRUE, legendloc = 'topleft',uncertainty=TRUE,plotdir=profile_dir,btarg=input$TRP_multi_like,minbthresh=input$LRP_multi_like))
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
debug(profile)
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
debug(profile)
liketable
Q
shiny::runApp('Github/SS-DL-tool')
debug(profile)
cbind(profilevec[whichruns], converged[whichruns],
liketable)
dim(liketable)
liketable
Q
edit(profile)
runApp('Github/SS-DL-tool')
starter.file <- dir()[tolower(dir()) == "starter.ss"]
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
liketable
liketable
like[["Component"]]
like[["Component"]]
liketable
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
Nsamps_ensemble_wts
shiny::runApp('Github/SS-DL-tool')
SpOt_en
SO_0
SO_0<-rbind(SO_0[-1,],data.frame(Year=as.numeric(colnames(Ensemble_SO)[1]),Metric=Ensemble_SO[,1],Model="Ensemble"))
SO_0[-1,]
SO_0
Ensemble_SO
Ensemble_SO
Ensemble_SO
S0_0
S_0
SO_0
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
Bratio_en[[1]]
Bratio_en[[2]]
Bratio_en[[1]]
Bratio_en[[2]]
SpOt_en[[1]]
SpOt_en[[2]]
SpOt_en[[3]]
F_en[[1]]
SPR_en[[1]]
ii
ii<-2
mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_SO<-mapply(c,Ensemble_SO,SpOt_en[[ii]])
dim(Ensemble_SO)
dim(Ensemble_SO)
SO_0
dim(SO_0)
data.frame(Year=as.numeric(colnames(Ensemble_SO)[1])
data.frame(Year=as.numeric(colnames(Ensemble_SO)[1]),Metric=Ensemble_SO[,1],Model="Ensemble")
as.numeric(colnames(Ensemble_SO)[1])
colnames(Ensemble_SO)[1]
Ensemble_SO
dim(Ensemble_SO)
dim(Ensemble_SO[[1]])
dim(Ensemble_SO[[2]])
Ensemble_SO<-SpOt_en[[1]]
Ensemble_SO
mapply(c,Ensemble_SO,SpOt_en[[2]])
mapply(c,Ensemble_SO,SpOt_en[[3]])
Ensemble_SO<-SpOt_en[[1]]
Ensemble_Bratio<-Bratio_en[[1]]
Ensemble_F<-F_en[[1]]
Ensemble_SPR<-SPR_en[[1]]
for(ii in 2:length(Nsamps_ensemble_wts))
{
Ensemble_SO<-mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_Bratio<-mapply(c,Ensemble_Bratio,Bratio_en[[ii]])
Ensemble_F<-mapply(c,Ensemble_F,F_en[[ii]])
Ensemble_SPR<-mapply(c,Ensemble_SPR,SPR_en[[ii]])
}
Ensemble_SO
dim(Ensemble_SO)
dim(Ensemble_SO[[1]])
colnames(Ensemble_SO)
as.numeric(colnames(Ensemble_SO)[1]
)
Ensemble_SO[,1]
Ensemble_SO[,1]
SO_0[-1,]
dim(SO_0[-1,])
Ensemble_SO<-SpOt_en[[1]]
Ensemble_Bratio<-Bratio_en[[1]]
Ensemble_F<-F_en[[1]]
Ensemble_SPR<-SPR_en[[1]]
for(ii in 2:length(Nsamps_ensemble_wts))
{
Ensemble_SO<-mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_Bratio<-mapply(c,Ensemble_Bratio,Bratio_en[[ii]])
Ensemble_F<-mapply(c,Ensemble_F,F_en[[ii]])
Ensemble_SPR<-mapply(c,Ensemble_SPR,SPR_en[[ii]])
}
dim(SO_0[-1,])
data.frame(Year=as.numeric(colnames(Ensemble_SO)[1])
)
dim(Ensemble_SO[,1])
length(Ensemble_SO[,1])
dim(SpOt_en[[1]])
(SpOt_en[[1]])
length(SpOt_en[[1]])
dim(SpOt_en)
SpOt_en
dim(Ensemble_SO)
Ensemble_SO<-SpOt_en[[1]]
Ensemble_Bratio<-Bratio_en[[1]]
Ensemble_F<-F_en[[1]]
Ensemble_SPR<-SPR_en[[1]]
dim(Ensemble_SO)
Ensemble_SO
SpOt_en
mapply(c,SpOt_en[[1:3]])
SpOt_en[[1:3]]
Ensemble_SO<-SpOt_en[[1]]
Ensemble_SO
mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_SO<-NA
for(ii in 1:length(Nsamps_ensemble_wts))
{
Ensemble_SO<-mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_Bratio<-mapply(c,Ensemble_Bratio,Bratio_en[[ii]])
Ensemble_F<-mapply(c,Ensemble_F,F_en[[ii]])
Ensemble_SPR<-mapply(c,Ensemble_SPR,SPR_en[[ii]])
}
Ensemble_SO
mapply(c,NA,SpOt_en[[ii]])
c(SpOt_en)
unlist(SpOt_en)
c(SpOt_en[[1]],SpOt_en[[2]])
SpOt_en[[1]]
SpOt_en[[2]]
c(SpOt_en[[2]],SpOt_en[[3]])
mapply(c,SpOt_en[[2]],SpOt_en[[3]])
mapply(c,SpOt_en[[``]],SpOt_en[[2]],SpOt_en[[3]])
mapply(c,SpOt_en[[1]],SpOt_en[[2]],SpOt_en[[3]])
dim(mapply(c,SpOt_en[[1]],SpOt_en[[2]],SpOt_en[[3]]))
c(SpOt_en[[2]],SpOt_en[[3]])
class(c(SpOt_en[[2]],SpOt_en[[3]]))
c(c(SpOt_en[[2]],SpOt_en[[3]]))
unlist(c(SpOt_en[[2]],SpOt_en[[3]]))
?unlist
c(SpOt_en[[2]],SpOt_en[[3]])
do.call(rbind.data.frame, SpOt_en[[1]])
do.call(rbind.data.frame, list(SpOt_en[[1]],SpOt_en[[1]]))
do.call(rbind.data.frame, list(SpOt_en))
do.call(rbind.data.frame, SpOt_en)
dim(do.call(rbind.data.frame, SpOt_en))
names(SpOt_en[[1]])
names(F_en[[1]])
length(names(F_en[[1]]))
length(names(SpOt_en[[1]]))
length(names(Bratio_en[[1]]))
length(names(SPR_en[[1]]))
colnames(Ensemble_SO)<-names(SpOt_en[[1]])
Ensemble_SO
Ensemble_SO<-do.call(rbind.data.frame, SpOt_en)
colnames(Ensemble_SO)<-names(SpOt_en[[1]])
Ensemble_SO
Ensemble_SO
Ensemble_SO<-do.call(rbind.data.frame, SpOt_en)
Ensemble_SO
colnames(Ensemble_SO)
length(colnames(Ensemble_SO))
names(SpOt_en[[1]])
colnames(Ensemble_SO)<-names(SpOt_en[[1]])
Ensemble_SO
Ensemble_SO<-do.call(rbind.data.frame, SpOt_en)
colnames(Ensemble_SO)<-names(SpOt_en[[1]])
Ensemble_Bratio<-do.call(rbind.data.frame, Bratio_en)
Ensemble_F<-do.call(rbind.data.frame, F_en)
Ensemble_SPR<-do.call(rbind.data.frame, SPR_en)
colnames(Ensemble_Bratio)<-colnames(Ensemble_F)<-colnames(Ensemble_SPR)<-names(Bratio_en[[1]])
SO_0<-rbind(SO_0[-1,],data.frame(Year=as.numeric(colnames(Ensemble_SO)[1]),Metric=Ensemble_SO[,1],Model="Ensemble"))
SO_0
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
names(Ensemble_SO_plot)
colnames(Ensemble_SO_plot)
head(Ensemble_SO_plot)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
Q
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
SO_t
SO_t$Year
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
ncol(Ensemble_SO)
SO_t$Year
Ensemble_SO[,ncol(Ensemble_SO)]
mean(Ensemble_SO[,ncol(Ensemble_SO)])
SO_t[-1,]
names(SpOt_en[[1]][nrow(modsummary.ensemble$SpawnBio)])
rbind(SO_t,data.frame(Year=names(SpOt_en[[i]][nrow(modsummary.ensemble$SpawnBio)]),Metric=unlist(SpOt_en[[i]][length(Nsamps_ensemble_wts)]),Model=input$myEnsemble[i]))
SpOt_en[[i]]
length(Nsamps_ensemble_wts)
nrow(modsummary.ensemble$Fvalue)]
nrow(modsummary.ensemble$Fvalue)
names(modsummary.ensemble)
names(modsummary.ensemble$SpawnBio)
ncols(modsummary.ensemble$SpawnBio)
ncol(modsummary.ensemble$SpawnBio)
nrow(modsummary.ensemble$SpawnBio)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
