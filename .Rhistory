runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
Age.comp.data_female
Age.comp.data_female[,1]
age_yrsfleet_females
yrsfleet_females<
yrsfleet_females
age_sex3_match_female
age_sex3_match_male
Age.comp.data_female_sex3
Age.comp.data_male_sex3
dim(Age.comp.data_male_sex3)
dim(Age.comp.data_female_sex3)
age.data.females
age.data.males
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
age.data.sex3
na.omit(rbind(age.data.females,age.data.males,age.data.unknowns,age.data.sex3))
dim(age.data.sex3)
age.data.sex3
age.data.sex3
age.data.sex3
age.data.names
age.data.names
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
age.data.sex3
dim(age.data.sex3)
age.data.names
dim(age.data.sex3)
Q
shiny::runApp('Github/SS-DL-tool')
age.data.sex3
Age.comp.data_male_sex3
Age.comp.data_female_sex3[,5]
Age.comp.data_male_sex3[,4]
Age.comp.data_female_sex3[1,]
Age.comp.data_male[1,]
paste0(Age.comp.data_female[,1],Age.comp.data_female[,3],Age.comp.data_female[,6])
Age.comp.data_male[1,]
Age.comp.data_female_sex3[1,]
Age.comp.data_female_sex3[1,]
Age.comp.data_male_sex3[1,]
Lt.comp.data_male_sex3
Lt.comp.data_male_sex3[1,]
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
catch.fleets
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
data.file$Nfleets
Q
Q
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
input$Sex3
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
profile <- profile(
dir = profile_dir, # directory
#globalpar = TRUE,
oldctlfile = ctlfile.in,
newctlfile = "control_modified.ss",
string = prof_parms_names,
profilevec = par.df,
extras = "-nohess",
prior_check=FALSE,
show_in_console = TRUE
)
try(SSplotComparisons(profilesummary, legendlabels = modelnames, ylimAdj = 1.30, new = FALSE,plot=FALSE,print=TRUE, legendloc = 'topleft',uncertainty=TRUE,plotdir=profile_dir,btarg=input$TRP_multi_like,minbthresh=input$LRP_multi_like))
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
debug(profile)
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
debug(profile)
liketable
Q
shiny::runApp('Github/SS-DL-tool')
debug(profile)
cbind(profilevec[whichruns], converged[whichruns],
liketable)
dim(liketable)
liketable
Q
edit(profile)
runApp('Github/SS-DL-tool')
starter.file <- dir()[tolower(dir()) == "starter.ss"]
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
liketable
liketable
like[["Component"]]
like[["Component"]]
liketable
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
Nsamps_ensemble_wts
shiny::runApp('Github/SS-DL-tool')
SpOt_en
SO_0
SO_0<-rbind(SO_0[-1,],data.frame(Year=as.numeric(colnames(Ensemble_SO)[1]),Metric=Ensemble_SO[,1],Model="Ensemble"))
SO_0[-1,]
SO_0
Ensemble_SO
Ensemble_SO
Ensemble_SO
S0_0
S_0
SO_0
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
Bratio_en[[1]]
Bratio_en[[2]]
Bratio_en[[1]]
Bratio_en[[2]]
SpOt_en[[1]]
SpOt_en[[2]]
SpOt_en[[3]]
F_en[[1]]
SPR_en[[1]]
ii
ii<-2
mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_SO<-mapply(c,Ensemble_SO,SpOt_en[[ii]])
dim(Ensemble_SO)
dim(Ensemble_SO)
SO_0
dim(SO_0)
data.frame(Year=as.numeric(colnames(Ensemble_SO)[1])
data.frame(Year=as.numeric(colnames(Ensemble_SO)[1]),Metric=Ensemble_SO[,1],Model="Ensemble")
as.numeric(colnames(Ensemble_SO)[1])
colnames(Ensemble_SO)[1]
Ensemble_SO
dim(Ensemble_SO)
dim(Ensemble_SO[[1]])
dim(Ensemble_SO[[2]])
Ensemble_SO<-SpOt_en[[1]]
Ensemble_SO
mapply(c,Ensemble_SO,SpOt_en[[2]])
mapply(c,Ensemble_SO,SpOt_en[[3]])
Ensemble_SO<-SpOt_en[[1]]
Ensemble_Bratio<-Bratio_en[[1]]
Ensemble_F<-F_en[[1]]
Ensemble_SPR<-SPR_en[[1]]
for(ii in 2:length(Nsamps_ensemble_wts))
{
Ensemble_SO<-mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_Bratio<-mapply(c,Ensemble_Bratio,Bratio_en[[ii]])
Ensemble_F<-mapply(c,Ensemble_F,F_en[[ii]])
Ensemble_SPR<-mapply(c,Ensemble_SPR,SPR_en[[ii]])
}
Ensemble_SO
dim(Ensemble_SO)
dim(Ensemble_SO[[1]])
colnames(Ensemble_SO)
as.numeric(colnames(Ensemble_SO)[1]
)
Ensemble_SO[,1]
Ensemble_SO[,1]
SO_0[-1,]
dim(SO_0[-1,])
Ensemble_SO<-SpOt_en[[1]]
Ensemble_Bratio<-Bratio_en[[1]]
Ensemble_F<-F_en[[1]]
Ensemble_SPR<-SPR_en[[1]]
for(ii in 2:length(Nsamps_ensemble_wts))
{
Ensemble_SO<-mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_Bratio<-mapply(c,Ensemble_Bratio,Bratio_en[[ii]])
Ensemble_F<-mapply(c,Ensemble_F,F_en[[ii]])
Ensemble_SPR<-mapply(c,Ensemble_SPR,SPR_en[[ii]])
}
dim(SO_0[-1,])
data.frame(Year=as.numeric(colnames(Ensemble_SO)[1])
)
dim(Ensemble_SO[,1])
length(Ensemble_SO[,1])
dim(SpOt_en[[1]])
(SpOt_en[[1]])
length(SpOt_en[[1]])
dim(SpOt_en)
SpOt_en
dim(Ensemble_SO)
Ensemble_SO<-SpOt_en[[1]]
Ensemble_Bratio<-Bratio_en[[1]]
Ensemble_F<-F_en[[1]]
Ensemble_SPR<-SPR_en[[1]]
dim(Ensemble_SO)
Ensemble_SO
SpOt_en
mapply(c,SpOt_en[[1:3]])
SpOt_en[[1:3]]
Ensemble_SO<-SpOt_en[[1]]
Ensemble_SO
mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_SO<-NA
for(ii in 1:length(Nsamps_ensemble_wts))
{
Ensemble_SO<-mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_Bratio<-mapply(c,Ensemble_Bratio,Bratio_en[[ii]])
Ensemble_F<-mapply(c,Ensemble_F,F_en[[ii]])
Ensemble_SPR<-mapply(c,Ensemble_SPR,SPR_en[[ii]])
}
Ensemble_SO
mapply(c,NA,SpOt_en[[ii]])
c(SpOt_en)
unlist(SpOt_en)
c(SpOt_en[[1]],SpOt_en[[2]])
SpOt_en[[1]]
SpOt_en[[2]]
c(SpOt_en[[2]],SpOt_en[[3]])
mapply(c,SpOt_en[[2]],SpOt_en[[3]])
mapply(c,SpOt_en[[``]],SpOt_en[[2]],SpOt_en[[3]])
mapply(c,SpOt_en[[1]],SpOt_en[[2]],SpOt_en[[3]])
dim(mapply(c,SpOt_en[[1]],SpOt_en[[2]],SpOt_en[[3]]))
c(SpOt_en[[2]],SpOt_en[[3]])
class(c(SpOt_en[[2]],SpOt_en[[3]]))
c(c(SpOt_en[[2]],SpOt_en[[3]]))
unlist(c(SpOt_en[[2]],SpOt_en[[3]]))
?unlist
c(SpOt_en[[2]],SpOt_en[[3]])
do.call(rbind.data.frame, SpOt_en[[1]])
do.call(rbind.data.frame, list(SpOt_en[[1]],SpOt_en[[1]]))
do.call(rbind.data.frame, list(SpOt_en))
do.call(rbind.data.frame, SpOt_en)
dim(do.call(rbind.data.frame, SpOt_en))
names(SpOt_en[[1]])
names(F_en[[1]])
length(names(F_en[[1]]))
length(names(SpOt_en[[1]]))
length(names(Bratio_en[[1]]))
length(names(SPR_en[[1]]))
colnames(Ensemble_SO)<-names(SpOt_en[[1]])
Ensemble_SO
Ensemble_SO<-do.call(rbind.data.frame, SpOt_en)
colnames(Ensemble_SO)<-names(SpOt_en[[1]])
Ensemble_SO
Ensemble_SO
Ensemble_SO<-do.call(rbind.data.frame, SpOt_en)
Ensemble_SO
colnames(Ensemble_SO)
length(colnames(Ensemble_SO))
names(SpOt_en[[1]])
colnames(Ensemble_SO)<-names(SpOt_en[[1]])
Ensemble_SO
Ensemble_SO<-do.call(rbind.data.frame, SpOt_en)
colnames(Ensemble_SO)<-names(SpOt_en[[1]])
Ensemble_Bratio<-do.call(rbind.data.frame, Bratio_en)
Ensemble_F<-do.call(rbind.data.frame, F_en)
Ensemble_SPR<-do.call(rbind.data.frame, SPR_en)
colnames(Ensemble_Bratio)<-colnames(Ensemble_F)<-colnames(Ensemble_SPR)<-names(Bratio_en[[1]])
SO_0<-rbind(SO_0[-1,],data.frame(Year=as.numeric(colnames(Ensemble_SO)[1]),Metric=Ensemble_SO[,1],Model="Ensemble"))
SO_0
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
names(Ensemble_SO_plot)
colnames(Ensemble_SO_plot)
head(Ensemble_SO_plot)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
Q
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
SO_t
SO_t$Year
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
ncol(Ensemble_SO)
SO_t$Year
Ensemble_SO[,ncol(Ensemble_SO)]
mean(Ensemble_SO[,ncol(Ensemble_SO)])
SO_t[-1,]
names(SpOt_en[[1]][nrow(modsummary.ensemble$SpawnBio)])
rbind(SO_t,data.frame(Year=names(SpOt_en[[i]][nrow(modsummary.ensemble$SpawnBio)]),Metric=unlist(SpOt_en[[i]][length(Nsamps_ensemble_wts)]),Model=input$myEnsemble[i]))
SpOt_en[[i]]
length(Nsamps_ensemble_wts)
nrow(modsummary.ensemble$Fvalue)]
nrow(modsummary.ensemble$Fvalue)
names(modsummary.ensemble)
names(modsummary.ensemble$SpawnBio)
ncols(modsummary.ensemble$SpawnBio)
ncol(modsummary.ensemble$SpawnBio)
nrow(modsummary.ensemble$SpawnBio)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
rv.Lt$data %>%
rename_all(tolower) %>%
dplyr::select(-nsamps) %>%
pivot_longer(c(-year, -fleet, -sex)) %>%
mutate(Year = factor(year),
name = as.numeric(gsub("[^0-9.-]", "", name)),
Lnu=-1,
L50_vline=if_else(is.na(L50()),-1,L50()),
Linf_vline=if_else(is.na(Linf()),-1,Linf()))
ppx<-rv.Lt$data %>%
rename_all(tolower) %>%
dplyr::select(-nsamps) %>%
pivot_longer(c(-year, -fleet, -sex)) %>%
mutate(Year = factor(year),
name = as.numeric(gsub("[^0-9.-]", "", name)),
Lnu=-1,
L50_vline=if_else(is.na(L50()),-1,L50()),
Linf_vline=if_else(is.na(Linf()),-1,Linf()))
ppx
head(ppx)
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
Lt.dat.plot
Lt.dat.plot[1,]
Lt.dat.plot$fleet
unique(Lt.dat.plot$fleet)
runApp('Github/SS-DL-tool')
expand.grid(c(1,2),c(0,1,2))
Lt.dat.plot.vline<-data.frmae(year=1,expand.grid(c(1,2),c(0,1,2),name=00,Year=1)
Lt.dat.plot.vline<-data.frame(year=1,expand.grid(c(1,2),c(0,1,2)),name=00,Year=1)
Lt.dat.plot.vline
Lt.dat.plot.vline
Lt.dat.plot.vline$sex[Lt.dat.plot.vline$sex==0|Lt.dat.plot.vline$sex==1]
Lt.dat.plot.vline$sex
Lt.dat.plot.vline
Lt.dat.plot.vline$Var2[Lt.dat.plot.vline$Var2==0|Lt.dat.plot.vline$Var2==1]
Lt.dat.plot.vline$Var2==0|Lt.dat.plot.vline$Var2==1
runApp('Github/SS-DL-tool')
colnames(Lt.dat.plot.vline)
colnames(Lt.dat.plot.vline)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
Lt.data.plot
Lt.dat.plot
colnames(Lt.dat.plot)
Lt.dat.plot.L50<-Lt.dat.plot.Linf<-data.frame(year=1,expand.grid(unique(Lt.dat.plot$fleet),unique(Lt.dat.plot$sex),name=00,Year=1)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
?get_buffer
library(PEPtools)
?get_buffer
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
Lt.dat.plot.L50
Lt.dat.plot.Linf
Lt.dat.plot.L50<-Lt.dat.plot.Linf<-data.frame(year=1,expand.grid(unique(Lt.dat.plot$fleet),unique(Lt.dat.plot$sex)),name=00,value=00,Year=1)
colnames(Lt.dat.plot.L50)<-colnames(Lt.dat.plot.Linf)<-c("year","fleet","sex","name","value","Year")
Lt.dat.plot.Linf$sex[Lt.dat.plot.Linf$sex==0|Lt.dat.plot.Linf$sex==1]<-Linf()
Lt.dat.plot.Linf$sex[Lt.dat.plot.Linf$sex==2]<-Linf_m_in()
runApp('Github/SS-DL-tool')
Lt.dat.plot.L50
Lt.dat.plot.L50
Lt.dat.plot.Linf
Lt.dat.plot.Linf
Linf()
!is.na(Linf()
)
)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
Lt.dat.plot.L50
Lt.dat.plot.Linf
Q
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
Lt.dat.plot.L50
Lt.dat.plot.Linf
ggplot(Lt.dat.plot,aes(name, value, color=Year)) +
geom_line()
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
Lt.dat.plot
Lt.dat.plot.Linf
Lt.dat.plot.Linf
colnames(Lt.dat.plot.Linf)
colnames(Lt.dat.plot)
class(Lt.dat.plot)
class(Lt.dat.plot.Linf)
Lt.dat.plot.Linf
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
Lt.dat.plot.L50
Lt.dat.plot.Linf
Discrete value supplied to continuous scale
runApp('Github/SS-DL-tool')
shiny::runApp()
shiny::runApp()
shiny::runApp()
?annotate
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
vline
Lt.dat.plot.Linf$vline
runApp()
runApp()
?facet_wrap
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(mpg)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(tidyverse)
df1 <- data.frame(date=as.Date(seq(ISOdate(2019,1,1), by="1 day", length.out=365)),
value=runif(365))
df2 <- data.frame(date=as.Date(seq(ISOdate(2019,1,1), by="1 day", length.out=365)),
value=runif(365)+3)
df1$Lines <- factor("Line 1")
df2$Lines <- factor("Line 2")
df3 <- rbind(df1, df2)
head(df3)
as.Date("2019-06-15")
ggplot(df3) +
geom_line(df3, mapping = aes(x = date, y = value, alpha = Lines)) +
geom_vline(aes(xintercept = as.Date("2019-06-15"), colour = "Milestone 1"), linetype = "dashed") +
geom_vline(aes(xintercept = as.Date("2019-07-20"), colour = "Milestone 2"), linetype = "dashed") +
geom_vline(aes(xintercept = as.Date("2019-09-15"), colour = "Milestone 3"), linetype = "dashed") +
scale_color_manual(name="Milestones",
breaks=c("Milestone 1","Milestone 2","Milestone 3"),
values = c("Milestone 1" = "red",
"Milestone 2" = "blue",
"Milestone 3" = "green"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
as.Date("2019-06-15")
as.Date("2019-06-15")
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggnewscale")
library(ggnewscale)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
