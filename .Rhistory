shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/wcgfishSAP')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
?if_else
x <- c(-5:5, NA)
if_else(x < 0, NA, x)
x <- c(-5:5, NA)
if_else(x < 0, NA, x)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/wcgfishSAP')
runApp('Github/wcgfishSAP')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
rv.Lt$data$value
rv.Lt$data
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
Age.comp.data_female
Age.comp.data_female[,1]
age_yrsfleet_females
yrsfleet_females<
yrsfleet_females
age_sex3_match_female
age_sex3_match_male
Age.comp.data_female_sex3
Age.comp.data_male_sex3
dim(Age.comp.data_male_sex3)
dim(Age.comp.data_female_sex3)
age.data.females
age.data.males
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
age.data.sex3
na.omit(rbind(age.data.females,age.data.males,age.data.unknowns,age.data.sex3))
dim(age.data.sex3)
age.data.sex3
age.data.sex3
age.data.sex3
age.data.names
age.data.names
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
age.data.sex3
dim(age.data.sex3)
age.data.names
dim(age.data.sex3)
Q
shiny::runApp('Github/SS-DL-tool')
age.data.sex3
Age.comp.data_male_sex3
Age.comp.data_female_sex3[,5]
Age.comp.data_male_sex3[,4]
Age.comp.data_female_sex3[1,]
Age.comp.data_male[1,]
paste0(Age.comp.data_female[,1],Age.comp.data_female[,3],Age.comp.data_female[,6])
Age.comp.data_male[1,]
Age.comp.data_female_sex3[1,]
Age.comp.data_female_sex3[1,]
Age.comp.data_male_sex3[1,]
Lt.comp.data_male_sex3
Lt.comp.data_male_sex3[1,]
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
catch.fleets
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
data.file$Nfleets
Q
Q
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
input$Sex3
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
profile <- profile(
dir = profile_dir, # directory
#globalpar = TRUE,
oldctlfile = ctlfile.in,
newctlfile = "control_modified.ss",
string = prof_parms_names,
profilevec = par.df,
extras = "-nohess",
prior_check=FALSE,
show_in_console = TRUE
)
try(SSplotComparisons(profilesummary, legendlabels = modelnames, ylimAdj = 1.30, new = FALSE,plot=FALSE,print=TRUE, legendloc = 'topleft',uncertainty=TRUE,plotdir=profile_dir,btarg=input$TRP_multi_like,minbthresh=input$LRP_multi_like))
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
debug(profile)
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
debug(profile)
liketable
Q
shiny::runApp('Github/SS-DL-tool')
debug(profile)
cbind(profilevec[whichruns], converged[whichruns],
liketable)
dim(liketable)
liketable
Q
edit(profile)
runApp('Github/SS-DL-tool')
starter.file <- dir()[tolower(dir()) == "starter.ss"]
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
liketable
liketable
like[["Component"]]
like[["Component"]]
liketable
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
Nsamps_ensemble_wts
shiny::runApp('Github/SS-DL-tool')
SpOt_en
SO_0
SO_0<-rbind(SO_0[-1,],data.frame(Year=as.numeric(colnames(Ensemble_SO)[1]),Metric=Ensemble_SO[,1],Model="Ensemble"))
SO_0[-1,]
SO_0
Ensemble_SO
Ensemble_SO
Ensemble_SO
S0_0
S_0
SO_0
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
Bratio_en[[1]]
Bratio_en[[2]]
Bratio_en[[1]]
Bratio_en[[2]]
SpOt_en[[1]]
SpOt_en[[2]]
SpOt_en[[3]]
F_en[[1]]
SPR_en[[1]]
ii
ii<-2
mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_SO<-mapply(c,Ensemble_SO,SpOt_en[[ii]])
dim(Ensemble_SO)
dim(Ensemble_SO)
SO_0
dim(SO_0)
data.frame(Year=as.numeric(colnames(Ensemble_SO)[1])
data.frame(Year=as.numeric(colnames(Ensemble_SO)[1]),Metric=Ensemble_SO[,1],Model="Ensemble")
as.numeric(colnames(Ensemble_SO)[1])
colnames(Ensemble_SO)[1]
Ensemble_SO
dim(Ensemble_SO)
dim(Ensemble_SO[[1]])
dim(Ensemble_SO[[2]])
Ensemble_SO<-SpOt_en[[1]]
Ensemble_SO
mapply(c,Ensemble_SO,SpOt_en[[2]])
mapply(c,Ensemble_SO,SpOt_en[[3]])
Ensemble_SO<-SpOt_en[[1]]
Ensemble_Bratio<-Bratio_en[[1]]
Ensemble_F<-F_en[[1]]
Ensemble_SPR<-SPR_en[[1]]
for(ii in 2:length(Nsamps_ensemble_wts))
{
Ensemble_SO<-mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_Bratio<-mapply(c,Ensemble_Bratio,Bratio_en[[ii]])
Ensemble_F<-mapply(c,Ensemble_F,F_en[[ii]])
Ensemble_SPR<-mapply(c,Ensemble_SPR,SPR_en[[ii]])
}
Ensemble_SO
dim(Ensemble_SO)
dim(Ensemble_SO[[1]])
colnames(Ensemble_SO)
as.numeric(colnames(Ensemble_SO)[1]
)
Ensemble_SO[,1]
Ensemble_SO[,1]
SO_0[-1,]
dim(SO_0[-1,])
Ensemble_SO<-SpOt_en[[1]]
Ensemble_Bratio<-Bratio_en[[1]]
Ensemble_F<-F_en[[1]]
Ensemble_SPR<-SPR_en[[1]]
for(ii in 2:length(Nsamps_ensemble_wts))
{
Ensemble_SO<-mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_Bratio<-mapply(c,Ensemble_Bratio,Bratio_en[[ii]])
Ensemble_F<-mapply(c,Ensemble_F,F_en[[ii]])
Ensemble_SPR<-mapply(c,Ensemble_SPR,SPR_en[[ii]])
}
dim(SO_0[-1,])
data.frame(Year=as.numeric(colnames(Ensemble_SO)[1])
)
dim(Ensemble_SO[,1])
length(Ensemble_SO[,1])
dim(SpOt_en[[1]])
(SpOt_en[[1]])
length(SpOt_en[[1]])
dim(SpOt_en)
SpOt_en
dim(Ensemble_SO)
Ensemble_SO<-SpOt_en[[1]]
Ensemble_Bratio<-Bratio_en[[1]]
Ensemble_F<-F_en[[1]]
Ensemble_SPR<-SPR_en[[1]]
dim(Ensemble_SO)
Ensemble_SO
SpOt_en
mapply(c,SpOt_en[[1:3]])
SpOt_en[[1:3]]
Ensemble_SO<-SpOt_en[[1]]
Ensemble_SO
mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_SO<-NA
for(ii in 1:length(Nsamps_ensemble_wts))
{
Ensemble_SO<-mapply(c,Ensemble_SO,SpOt_en[[ii]])
Ensemble_Bratio<-mapply(c,Ensemble_Bratio,Bratio_en[[ii]])
Ensemble_F<-mapply(c,Ensemble_F,F_en[[ii]])
Ensemble_SPR<-mapply(c,Ensemble_SPR,SPR_en[[ii]])
}
Ensemble_SO
mapply(c,NA,SpOt_en[[ii]])
c(SpOt_en)
unlist(SpOt_en)
c(SpOt_en[[1]],SpOt_en[[2]])
SpOt_en[[1]]
SpOt_en[[2]]
c(SpOt_en[[2]],SpOt_en[[3]])
mapply(c,SpOt_en[[2]],SpOt_en[[3]])
mapply(c,SpOt_en[[``]],SpOt_en[[2]],SpOt_en[[3]])
mapply(c,SpOt_en[[1]],SpOt_en[[2]],SpOt_en[[3]])
dim(mapply(c,SpOt_en[[1]],SpOt_en[[2]],SpOt_en[[3]]))
c(SpOt_en[[2]],SpOt_en[[3]])
class(c(SpOt_en[[2]],SpOt_en[[3]]))
c(c(SpOt_en[[2]],SpOt_en[[3]]))
unlist(c(SpOt_en[[2]],SpOt_en[[3]]))
?unlist
c(SpOt_en[[2]],SpOt_en[[3]])
do.call(rbind.data.frame, SpOt_en[[1]])
do.call(rbind.data.frame, list(SpOt_en[[1]],SpOt_en[[1]]))
do.call(rbind.data.frame, list(SpOt_en))
do.call(rbind.data.frame, SpOt_en)
dim(do.call(rbind.data.frame, SpOt_en))
names(SpOt_en[[1]])
names(F_en[[1]])
length(names(F_en[[1]]))
length(names(SpOt_en[[1]]))
length(names(Bratio_en[[1]]))
length(names(SPR_en[[1]]))
colnames(Ensemble_SO)<-names(SpOt_en[[1]])
Ensemble_SO
Ensemble_SO<-do.call(rbind.data.frame, SpOt_en)
colnames(Ensemble_SO)<-names(SpOt_en[[1]])
Ensemble_SO
Ensemble_SO
Ensemble_SO<-do.call(rbind.data.frame, SpOt_en)
Ensemble_SO
colnames(Ensemble_SO)
length(colnames(Ensemble_SO))
names(SpOt_en[[1]])
colnames(Ensemble_SO)<-names(SpOt_en[[1]])
Ensemble_SO
Ensemble_SO<-do.call(rbind.data.frame, SpOt_en)
colnames(Ensemble_SO)<-names(SpOt_en[[1]])
Ensemble_Bratio<-do.call(rbind.data.frame, Bratio_en)
Ensemble_F<-do.call(rbind.data.frame, F_en)
Ensemble_SPR<-do.call(rbind.data.frame, SPR_en)
colnames(Ensemble_Bratio)<-colnames(Ensemble_F)<-colnames(Ensemble_SPR)<-names(Bratio_en[[1]])
SO_0<-rbind(SO_0[-1,],data.frame(Year=as.numeric(colnames(Ensemble_SO)[1]),Metric=Ensemble_SO[,1],Model="Ensemble"))
SO_0
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
names(Ensemble_SO_plot)
colnames(Ensemble_SO_plot)
head(Ensemble_SO_plot)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
Q
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
SO_t
SO_t$Year
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
ncol(Ensemble_SO)
SO_t$Year
Ensemble_SO[,ncol(Ensemble_SO)]
mean(Ensemble_SO[,ncol(Ensemble_SO)])
SO_t[-1,]
names(SpOt_en[[1]][nrow(modsummary.ensemble$SpawnBio)])
rbind(SO_t,data.frame(Year=names(SpOt_en[[i]][nrow(modsummary.ensemble$SpawnBio)]),Metric=unlist(SpOt_en[[i]][length(Nsamps_ensemble_wts)]),Model=input$myEnsemble[i]))
SpOt_en[[i]]
length(Nsamps_ensemble_wts)
nrow(modsummary.ensemble$Fvalue)]
nrow(modsummary.ensemble$Fvalue)
names(modsummary.ensemble)
names(modsummary.ensemble$SpawnBio)
ncols(modsummary.ensemble$SpawnBio)
ncol(modsummary.ensemble$SpawnBio)
nrow(modsummary.ensemble$SpawnBio)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('C:/Users/Jason.Cope/Downloads/helper-main/helper-main')
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
?get_settings_profile
?model_settings
?get_settings
?profile
remotes::install_github("r4ss/r4ss")
install.packages(c("acepack", "askpass", "audio", "BiocManager", "bookdown", "brms", "bslib", "Cairo", "classInt", "cli", "clue", "colourpicker", "config", "cpp11", "credentials", "curl", "cyclocomp", "datamods", "datawizard", "dbplyr", "DEoptimR", "DescTools", "deSolve", "dplyr", "DT", "duckdb", "ellipse", "emmeans", "EnvStats", "evaluate", "fastmatch", "fields", "flextable", "fontawesome", "forecast", "foreign", "fs", "FSA", "FSAdata", "gap", "gap.datasets", "gargle", "GenSA", "gert", "ggeffects", "ggfun", "ggplot2", "ggplotify", "gifski", "glmnet", "gnm", "GPArotation", "graphlayouts", "gss", "gtable", "gtExtras", "h2o", "Hmisc", "htmltools", "httr", "igraph", "insight", "knitr", "ks", "kutils", "labeling", "languageserver", "lattice", "lavaan", "lintr", "lmom", "lpSolve", "lubridate", "magick", "markdown", "Matrix", "MatrixExtra", "minpack.lm", "minqa", "mirt", "mockery", "MSEtool", "mvtnorm", "nlme", "nlstools", "openssl", "packrat", "pak", "patchwork", "pdftools", "pivottabler", "pkgload", "plyr", "polyclip", "prettyunits", "prodlim", "progressr", "promises", "psych", "purrr", "quanteda.textstats", "quantmod", "quantreg", "rbibutils", "RcppArmadillo", "Rdpack", "recipes", "rematch", "renv", "reticulate", "rio", "rmarkdown", "rms", "rnaturalearth", "RODBC", "rootSolve", "rpf", "rsconnect", "rstan", "rstanarm", "shiny", "shinyWidgets", "snakecase", "sp", "spatial", "splancs", "StanHeaders", "stm", "styler", "survival", "tabr", "terra", "tesseract", "tidybayes", "timeSeries", "tinytex", "TMB", "tmbstan", "units", "uuid", "vcdExtra", "vdiffr", "viridis", "vroom", "webp", "withr", "wk", "xfun", "yulab.utils"))
install.packages(c("acepack", "askpass", "audio", "BiocManager", "bookdown", "brms", "bslib", "Cairo", "classInt", "cli", "clue", "colourpicker", "config", "cpp11", "credentials", "curl", "cyclocomp", "datamods", "datawizard", "dbplyr", "DEoptimR", "DescTools", "deSolve", "dplyr", "DT", "duckdb", "ellipse", "emmeans", "EnvStats", "evaluate", "fastmatch", "fields", "flextable", "fontawesome", "forecast", "foreign", "fs", "FSA", "FSAdata", "gap", "gap.datasets", "gargle", "GenSA", "gert", "ggeffects", "ggfun", "ggplot2", "ggplotify", "gifski", "glmnet", "gnm", "GPArotation", "graphlayouts", "gss", "gtable", "gtExtras", "h2o", "Hmisc", "htmltools", "httr", "igraph", "insight", "knitr", "ks", "kutils", "labeling", "languageserver", "lattice", "lavaan", "lintr", "lmom", "lpSolve", "lubridate", "magick", "markdown", "Matrix", "MatrixExtra", "minpack.lm", "minqa", "mirt", "mockery", "MSEtool", "mvtnorm", "nlme", "nlstools", "openssl", "packrat", "pak", "patchwork", "pdftools", "pivottabler", "pkgload", "plyr", "polyclip", "prettyunits", "prodlim", "progressr", "promises", "psych", "purrr", "quanteda.textstats", "quantmod", "quantreg", "rbibutils", "RcppArmadillo", "Rdpack", "recipes", "rematch", "renv", "reticulate", "rio", "rmarkdown", "rms", "rnaturalearth", "RODBC", "rootSolve", "rpf", "rsconnect", "rstan", "rstanarm", "shiny", "shinyWidgets", "snakecase", "sp", "spatial", "splancs", "StanHeaders", "stm", "styler", "survival", "tabr", "terra", "tesseract", "tidybayes", "timeSeries", "tinytex", "TMB", "tmbstan", "units", "uuid", "vcdExtra", "vdiffr", "viridis", "vroom", "webp", "withr", "wk", "xfun", "yulab.utils"))
shiny::runApp('Github/SS-DL-tool')
test.dat.in<-SS_readdat("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/193_kod_3ft_3sex_selfix_est_fCVo - Copy/datafile.dat"))
test.dat.in<-SS_readdat("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/193_kod_3ft_3sex_selfix_est_fCVo - Copy/datafile.dat")
names(test.dat.in)
?check_exe
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
run_diagnostics(mydir = mydir, model_settings = model_settings)
run_diagnostics(mydir = mydir, model_settings = model_settings)
run_diagnostics(mydir = mydir, model_settings = model_settings)
model_settings$exe
model_settings
model_settings$exe
get = get_settings_profile( parameters =  prof_parms_names,
low =  as.numeric(trimws(unlist(strsplit(input$Prof_Low_val,",")))),
high = as.numeric(trimws(unlist(strsplit(input$Prof_Hi_val,",")))),
step_size = as.numeric(trimws(unlist(strsplit(input$Prof_step,",")))),
param_space = rep('real',length(as.numeric(trimws(unlist(strsplit(input$Prof_Low_val,",")))))),
use_prior_like = use_prior_like_in,
exe=ss3
)
?get_settings_profile
?get_settings
model_settings = get_settings(settings = list(base_name = basename(pathLP()),
run = "profile",
profile_details = get,exe="ss3"))
Q
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
remotes::install_github("chantelwetzel-noaa/HandyCode")
remotes::install_github("nwfsc-assess/nwfscDiag")
install.packages(c("dplyr", "fs", "htmltools", "lattice", "Matrix", "minqa", "nlme", "plyr", "purrr"))
install.packages(c("dplyr", "fs", "htmltools", "lattice", "Matrix", "minqa", "nlme", "plyr", "purrr"))
install.packages(c("dplyr", "fs", "htmltools", "lattice", "Matrix", "minqa", "nlme", "plyr", "purrr"))
install.packages("plyr")
shiny::runApp('Github/SS-DL-tool')
debug(profile_plot)
runApp('Github/SS-DL-tool')
SSplotProfile(summaryoutput = profilesummary, main = "Changes in total likelihood",
profile.string = get, profile.label = label, ymax = ymax1,
exact = exact)
Q
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
#' Get FishLife life history traits
#'
#' Retrieves life history trait predictions from FishLife (Thorson et al. 2018). This
#' is a wrapper for the Plot_taxa() function in the FishLife R package.
#'
#' @param species A character vector of species scientific names
#' @return A dataframe with life history trait predictions from FishLife for each species
#' @examples
#' # Look up life history traits
#' species <- c("Gadus morhua", "Centropristis striata", "Paralichthys dentatus")
#' fishlife(species)
#' @export
fishlife <- function(species){
# Setup container
spp <- sort(unique(species))
fl <- data.frame(species=spp, linf_cm=NA, k=NA, winf_g=NA, tmax_yr=NA, tmat_yr=NA,
m=NA, lmat_cm=NA, temp_c=NA, stringsAsFactors=F)
# Loop through species
for(i in 1:nrow(fl)){
# Get spp info
sciname <- fl$species[i]
genus <- stringr::word(sciname, 1)
nwords_in_spp <- length(strsplit(sciname, " ")[[1]])
species <- stringr::word(sciname, start=2, end=nwords_in_spp)
species <- ifelse(species=="spp", "predictive", species)
# Try looking up in FishLife
spp_info <- try(FishLife::Plot_taxa(FishLife::Search_species(Genus=genus, Species=species)$match_taxonomy))
if(inherits(spp_info, "try-error")){
# Record blanks
#      fl[i,2:ncol(fl)] <- rep(NA, ncol(fl)-1)
}else{
# Values are in log-scale except temperature
spp_lh_vals_log <- spp_info[[1]]$Mean_pred
spp_lh_vals <- c(exp(spp_lh_vals_log[1:7]), spp_lh_vals_log[8],spp_lh_vals_log[9:20])
#     fl[i,2:ncol(fl)] <- spp_lh_vals
}
}
# Return
#  return(fl)
return(spp_lh_vals)
}
library(FishLife)
fishlife("Sebastes mystinus")
fishlife(Sebastes mystinus)
devtools::install_github("james-thorson/FishLife")
fishlife(Sebastes mystinus)
devtools::install_github("james-thorson/FishLife")
library(FishLife)
fishlife(Sebastes mystinus)
fishlife("Sebastes mystinus")
BRF_ex<-Plot_taxa(Search_species(Genus="Scorpaenichthys",Species="marmoratus")$match_taxonomy, mfrow=c(2,2) )
library(fishbase)
library(rfishbase)
fishlife("Sebastes mystinus")
Plot_taxa( Search_species(Genus="Lutjanus",Species="campechanus")$match_taxonomy )
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
remotes::install_github("nwfsc-assess/nwfscDiag")
remotes::install_github("chantelwetzel-noaa/HandyCode")
remotes::install_github("chantelwetzel-noaa/HandyCode")
remotes::install_github("nwfsc-assess/nwfscDiag")
shiny::runApp('Github/SS-DL-tool')
fishlife("Sebastes mystinus")
packageVersion("rfishbase")
remotes::install_github( 'ropensci/rfishbase@fb-21.06', force=TRUE )
fishlife("Sebastes mystinus")
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
remotes::install_github("nwfsc-assess/nwfscDiag")
install.packages(c("adephylo", "bookdown", "checkmate", "chk", "cli", "contentid", "covr", "dbplyr", "DEoptimR", "dotCall64", "dplyr", "duckdb", "emmeans", "FactoMineR", "fansi", "fBasics", "fGarch", "flextable", "fs", "gdata", "gdtools", "ggeffects", "ggplot2", "ggrepel", "glmmTMB", "gt", "htmltools", "httpuv", "hunspell", "insight", "lattice", "magick", "markdown", "Matrix", "minqa", "mirt", "nlme", "officer", "phylopath", "phylosem", "phylosignal", "plotly", "plyr", "polspline", "prabclus", "proxyC", "purrr", "QuickJSR", "ragg", "raster", "rbibutils", "reactR", "reticulate", "rfishbase", "rpart", "rstan", "sdmTMB", "shiny", "sp", "spam", "svglite", "systemfonts", "terra", "testthat", "textshaping", "tinytex", "TMB", "utf8", "uuid", "V8", "vctrs", "wk"))
install.packages(c("adephylo", "bookdown", "checkmate", "chk", "cli", "contentid", "covr", "dbplyr", "DEoptimR", "dotCall64", "dplyr", "duckdb", "emmeans", "FactoMineR", "fansi", "fBasics", "fGarch", "flextable", "fs", "gdata", "gdtools", "ggeffects", "ggplot2", "ggrepel", "glmmTMB", "gt", "htmltools", "httpuv", "hunspell", "insight", "lattice", "magick", "markdown", "Matrix", "minqa", "mirt", "nlme", "officer", "phylopath", "phylosem", "phylosignal", "plotly", "plyr", "polspline", "prabclus", "proxyC", "purrr", "QuickJSR", "ragg", "raster", "rbibutils", "reactR", "reticulate", "rfishbase", "rpart", "rstan", "sdmTMB", "shiny", "sp", "spam", "svglite", "systemfonts", "terra", "testthat", "textshaping", "tinytex", "TMB", "utf8", "uuid", "V8", "vctrs", "wk"))
install.packages("CatDyn")
install.packages("CatDyn")
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
