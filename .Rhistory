guides(color = guide_legend(override.aes = list(fill = "white")),)+
labs(color="Year",size="Relative SB0")+
#  scale_y_continuous(breaks = seq(0, 11, 1),
#                    limits=c(0,11))+
facet_wrap(~ Species)
ggplot(GF_SOdep_spp,aes(Area,Depletion,group=factor(Year), color=factor(Year)))+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0.4,ymax=Inf),
fill="lightgreen")+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0.25,ymax=0.4),
fill="yellow")+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0,ymax=0.25),
fill="red")+
geom_line()+
geom_point(aes(size=RelativeSB0))+
scale_colour_manual(values=wes_palette("IsleofDogs1",4))+
ylim(0,1)+
geom_hline(data=hlines, aes(yintercept=yint))+
theme(legend.key = element_rect(fill = NA),
axis.text.x = element_text(angle = 90, vjust = 0.2, hjust=0.95))+
guides(color = guide_legend(override.aes = list(fill = "white")),)+
labs(color="Year",size="Relative SB0")+
#  scale_y_continuous(breaks = seq(0, 11, 1),
#                    limits=c(0,11))+
facet_wrap(~ Species)
ggplot(GF_SOdep_spp,aes(Area,Depletion,group=factor(Year), color=factor(Year)))+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0.4,ymax=Inf),
fill="lightgreen")+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0.25,ymax=0.4),
fill="yellow")+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0,ymax=0.25),
fill="red")+
geom_line()+
geom_point(aes(size=RelativeSB0))+
scale_colour_manual(values=wes_palette("IsleofDogs1",4))+
ylim(0,1)+
geom_hline(data=hlines, aes(yintercept=yint))+
theme(legend.key = element_rect(fill = NA),
axis.text.x = element_text(angle = 60, vjust = 0.2, hjust=0.95))+
guides(color = guide_legend(override.aes = list(fill = "white")),)+
labs(color="Year",size="Relative SB0")+
#  scale_y_continuous(breaks = seq(0, 11, 1),
#                    limits=c(0,11))+
facet_wrap(~ Species)
ggplot(GF_SOdep_spp,aes(Area,Depletion,group=factor(Year), color=factor(Year)))+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0.4,ymax=Inf),
fill="lightgreen")+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0.25,ymax=0.4),
fill="yellow")+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0,ymax=0.25),
fill="red")+
geom_line()+
geom_point(aes(size=RelativeSB0))+
scale_colour_manual(values=wes_palette("IsleofDogs1",4))+
ylim(0,1)+
geom_hline(data=hlines, aes(yintercept=yint))+
theme(legend.key = element_rect(fill = NA),
axis.text.x = element_text(angle = 60, vjust = 0.2, hjust=-0.95))+
guides(color = guide_legend(override.aes = list(fill = "white")),)+
labs(color="Year",size="Relative SB0")+
#  scale_y_continuous(breaks = seq(0, 11, 1),
#                    limits=c(0,11))+
facet_wrap(~ Species)
ggplot(GF_SOdep_spp,aes(Area,Depletion,group=factor(Year), color=factor(Year)))+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0.4,ymax=Inf),
fill="lightgreen")+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0.25,ymax=0.4),
fill="yellow")+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0,ymax=0.25),
fill="red")+
geom_line()+
geom_point(aes(size=RelativeSB0))+
scale_colour_manual(values=wes_palette("IsleofDogs1",4))+
ylim(0,1)+
geom_hline(data=hlines, aes(yintercept=yint))+
theme(legend.key = element_rect(fill = NA),
axis.text.x = element_text(angle = 89, vjust = 0.2, hjust=0.95))+
guides(color = guide_legend(override.aes = list(fill = "white")),)+
labs(color="Year",size="Relative SB0")+
#  scale_y_continuous(breaks = seq(0, 11, 1),
#                    limits=c(0,11))+
facet_wrap(~ Species)
ggplot(GF_SOdep_spp,aes(Area,Depletion,group=factor(Year), color=factor(Year)))+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0.4,ymax=Inf),
fill="lightgreen")+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0.25,ymax=0.4),
fill="yellow")+
geom_rect(data=NULL,aes(xmin=-Inf,xmax=Inf,ymin=0,ymax=0.25),
fill="red")+
geom_line()+
geom_point(aes(size=RelativeSB0))+
scale_colour_manual(values=wes_palette("IsleofDogs1",4))+
ylim(0,1)+
geom_hline(data=hlines, aes(yintercept=yint))+
theme(legend.key = element_rect(fill = NA),
axis.text.x = element_text(angle = 90, vjust = 0.2, hjust=0.95))+
guides(color = guide_legend(override.aes = list(fill = "white")),)+
labs(color="Year",size="Relative SB0")+
#  scale_y_continuous(breaks = seq(0, 11, 1),
#                    limits=c(0,11))+
facet_wrap(~ Species)
install.packages(c("bookdown", "broom", "bslib", "cli", "contentid", "datawizard", "digest", "duckdb", "emmeans", "evaluate", "FactoMineR", "foreign", "FSAdata", "future", "gert", "ggiraph", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jsonlite", "LiblineaR", "listenv", "maptools", "nlme", "openssl", "parallelly", "pkgdown", "PKI", "png", "progressr", "quanteda", "raster", "rbibutils", "reactable", "rfishbase", "rgdal", "rgeos", "rmarkdown", "RODBC", "roxygen2", "rvg", "s2", "segmented", "shiny", "stringr", "terra", "testthat", "text2vec", "tidyplus", "timeDate", "tinytex", "tm", "topicmodels", "triangle", "units", "whisker", "wk", "XML"))
install.packages(c("bookdown", "broom", "bslib", "cli", "contentid", "datawizard", "digest", "duckdb", "emmeans", "evaluate", "FactoMineR", "foreign", "FSAdata", "future", "gert", "ggiraph", "htmltools", "htmlwidgets", "httpuv", "jpeg", "jsonlite", "LiblineaR", "listenv", "maptools", "nlme", "openssl", "parallelly", "pkgdown", "PKI", "png", "progressr", "quanteda", "raster", "rbibutils", "reactable", "rfishbase", "rgdal", "rgeos", "rmarkdown", "RODBC", "roxygen2", "rvg", "s2", "segmented", "shiny", "stringr", "terra", "testthat", "text2vec", "tidyplus", "timeDate", "tinytex", "tm", "topicmodels", "triangle", "units", "whisker", "wk", "XML"))
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
example(stan_model,package="rstan",run.dontrun=TRUE)
remove.packages("rstan")
remove.packages("StanHeaders")
remove.packages("RcppParallel")
remove.packages("RcppEigen")
remove.packages("Rcpp")
remove.packages("inline")
remove.packages("pkgbuild")
remove.packages("BH")
install.packages("Rcpp")
install.packages("RcppParallel")
install.packages("inline")
install.packages("pkgbuild")
install.packages("BH")
## Note I am using SS version 3.30.16, which is freely available
## from: https://vlab.ncep.noaa.gov/web/stock-synthesis/home
## Non-windows users will need to download and put that
## executable in the hake folder
library(adnuts)
packageVersion('adnuts')        # 1.1.2
library(shinystan)
install.packages("RcppEigen")
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
vignette('adnuts')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?shinyDirChoose
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?exists
ls()
exists("hlines")
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?shinyDirChoose
shinyFilesExample()
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
input$add_comms
!is.null(input$add_comms)
input$no_hess
is.null(input$no_hess)
input$no_hess
input$add_comms
input$add_comms
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
mms==TRUE
input$add_comms==TRUE
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?HTML
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
file.copy(C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1,C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2")
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2")
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",recursive-FALSE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",overwrite=recursive,recursive-FALSE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",overwrite=recursive,recursive=FALSE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",overwrite=recursive,recursive=FALSE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",recursive=FALSE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",recursive=TRUE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",recursive=TRUE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",overwrite=FALSE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",overwrite=TRUE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1",from="C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1",to="C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2")
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",overwrite=TRUE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",overwrite=TRUE)
?list.files
file.copy(list.files("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1",full.names = TRUE),to="C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",recursive=TRUE)
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
input$iter
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
xx<-summary(fit_model)
xx
paste(p,"/fit.model.RData")
save(fit.model,file=paste0(p,"/fit.model.RData"))
fit.model
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
Q
Q
shiny::runApp('Github/SS-DL-tool')
attributes(fit_model)
fit.model$par_names
fit_model$par_names
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
fit.mod.summary<-paste("Bayesian diagnostics: ",summary(fit_model))
fit.mod.summary
summary(fit_model)
attributes(fit_model)
fit_model$sampler_params
fit_model[4]
fit_model[5]
fit_model[6]
fit_model[7]
fit_model[8]
fit_model[9]
fit_model[10]
fit_model[11]
fit_model[12]
fit_model[13]
fit_model[14]
fit_model[15]
fit_model[16]
fit_model[17]
shiny::runApp('Github/SS-DL-tool')
?verbatimTextOutput
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
summary(fit_model)
class(fit_model)
summary(fit_model)
class(summary(fit_model))
attributs(summary(fit_model))
attributes(summary(fit_model))
as.character(summary(fit_model))
class(as.character(summary(fit_model)))
paste0("Diagnostics",(as.character(summary(fit_model))))
save(summary(fit_model),paste0(p,"/fit_model_sum.RData"))
getwd()
save(summary(fit_model),"test.Rdata")
print(summary(fit_model))
paste0(""BB,print(summary(fit_model)))
paste0("BB",print(summary(fit_model)))
xx<-paste0("BB",print(summary(fit_model)))
xx
levels(fit_model)
fit_model
summary(fit_model)
paste0("BB",fit_model)
fit_model
fit_model[1]
fit_model[[1]]
xx<-list(summary(fit_model))
xx
xx[[1]]
?sink
file.summary.out<-file(paste0(p,"/file.summary.out.log"))
ile.summary.out
file.summary.out
summary(fit_model)
sink(file.summary.out,append=TRUE)
summary(fit_model)
cat(readLines("file.summary.out"), sep="\n")
file.summary.out
sink()
file.summary.out<-file(paste0(p,"/file.summary.out.log"))
sink(file.summary.out,append=TRUE)
sink(file.summary.out,append=TRUE,type="message")
summary(fit_model)
sink()
sink(type="message")
cat(readLines("file.summary.out"), sep="\n")
file.summary.out<-file(paste0(p,"/file.summary.out.log"))
sink(file.summary.out,split=TRUE)
print(summary(fit_model))
file.summary.out
save(file.summary.out,paste0(p,"/file.summary.out.log"))
save(file.summary.out)
?capture.output
utils::capture.output(summary(fit_model), file=paste0(p,"/file.summary.out.log"))
paste0(p,"/file.summary.out.log")
xx<-read(paste0(p,"/file.summary.out.log"))
?read
?read.txt
?read.text
?load
xx<-read.delim(paste0(p,"/file.summary.out.log"))
xx
?read.delim
?capture.output
clse()
cl0se()
close()
dev.off*()
dev.off()
utils::capture.output(summary(fit_model), file=NULL)
fit.mod.summary<-utils::capture.output(summary(fit_model), file=NULL)
fit.mod.summary
print(fit.mod.summary)
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?dir.create
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
dir.exists("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1_RWM")
dir.exists("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1_RWM")
shiny::runApp('Github/SS-DL-tool')
dir.exists(file.path(modeff.dir,modeff.name)
)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
print(fit.mod.summary.out)
fit.mod.summary
utils::capture.output(summary(fit_model), file=NULL)
utils::capture.output(summary(fit_model), file=NULL)
fit.mod.summary
fit.mod.summary[1]
print(fit.mod.summary)
print(fit.mod.summary)
shiny::runApp('Github/SS-DL-tool')
paste0(fit.mod.summary[1],fit.mod.summary[2],fit.mod.summary[3])
?launch_shinyadmb
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?try
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
debug(SSexecutivesummary)
Get.Values(replist = replist, label = sb.name,
years, ci_value)
Q
SSexecutivesummary
edit(SSexecutivesummary)
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('TestDeployment')
runApp('Github/Natural-Mortality-Tool')
?adnuts
?sample_nuts
library(adnuts)
?sample_nuts
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
#detach("package:sa4ss", unload = TRUE)
#remotes::install_github("nwfsc-assess/sa4ss")
#devtools::load_all("C:/Users/Chantel.Wetzel/Documents/GitHub/r4ss")
library(sa4ss)
#detach("package:sa4ss", unload = TRUE)
#remotes::install_github("nwfsc-assess/sa4ss")
#devtools::load_all("C:/Users/Chantel.Wetzel/Documents/GitHub/r4ss")
library(sa4ss)
tryCatch(expr = pkgload::unload("sa4ss"), error = function(x) "")
pak::pkg_install("pfmc-assessments/sa4ss")
install.packages("pak")
tryCatch(expr = pkgload::unload("sa4ss"), error = function(x) "")
pak::pkg_install("pfmc-assessments/sa4ss")
#detach("package:sa4ss", unload = TRUE)
#remotes::install_github("nwfsc-assess/sa4ss")
#devtools::load_all("C:/Users/Chantel.Wetzel/Documents/GitHub/r4ss")
library(sa4ss)
.Last.error
install.packages(c("class", "KernSmooth", "MASS", "Matrix", "mgcv", "nnet"), lib="C:/Users/Jason.Cope/AppData/Local/R/cache/R/renv/sandbox/R-4.3/x86_64-w64-mingw32/e9e85620")
install.packages("class")
install.packages(c("KernSmooth", "MASS", "Matrix", "mgcv", "nnet"), lib="C:/Users/Jason.Cope/AppData/Local/R/cache/R/renv/sandbox/R-4.3/x86_64-w64-mingw32/e9e85620")
tryCatch(expr = pkgload::unload("sa4ss"), error = function(x) "")
pak::pkg_install("pfmc-assessments/sa4ss")
install.packages("remotes")
install.packages("remotes")
remotes::install_github("r4ss/r4ss")
