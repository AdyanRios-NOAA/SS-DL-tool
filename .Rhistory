remove.packages("RcppEigen")
remove.packages("Rcpp")
remove.packages("inline")
remove.packages("pkgbuild")
remove.packages("BH")
install.packages("Rcpp")
install.packages("RcppParallel")
install.packages("inline")
install.packages("pkgbuild")
install.packages("BH")
## Note I am using SS version 3.30.16, which is freely available
## from: https://vlab.ncep.noaa.gov/web/stock-synthesis/home
## Non-windows users will need to download and put that
## executable in the hake folder
library(adnuts)
packageVersion('adnuts')        # 1.1.2
library(shinystan)
install.packages("RcppEigen")
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
vignette('adnuts')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?shinyDirChoose
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?exists
ls()
exists("hlines")
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?shinyDirChoose
shinyFilesExample()
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
input$add_comms
!is.null(input$add_comms)
input$no_hess
is.null(input$no_hess)
input$no_hess
input$add_comms
input$add_comms
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
mms==TRUE
input$add_comms==TRUE
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?HTML
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
file.copy(C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1,C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2")
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2")
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",recursive-FALSE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",overwrite=recursive,recursive-FALSE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",overwrite=recursive,recursive=FALSE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",overwrite=recursive,recursive=FALSE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",recursive=FALSE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",recursive=TRUE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",recursive=TRUE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",overwrite=FALSE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",overwrite=TRUE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1",from="C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1",to="C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2")
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",overwrite=TRUE)
file.copy("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1","C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",overwrite=TRUE)
?list.files
file.copy(list.files("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1",full.names = TRUE),to="C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_2",recursive=TRUE)
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
input$iter
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
xx<-summary(fit_model)
xx
paste(p,"/fit.model.RData")
save(fit.model,file=paste0(p,"/fit.model.RData"))
fit.model
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
Q
Q
shiny::runApp('Github/SS-DL-tool')
attributes(fit_model)
fit.model$par_names
fit_model$par_names
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
fit.mod.summary<-paste("Bayesian diagnostics: ",summary(fit_model))
fit.mod.summary
summary(fit_model)
attributes(fit_model)
fit_model$sampler_params
fit_model[4]
fit_model[5]
fit_model[6]
fit_model[7]
fit_model[8]
fit_model[9]
fit_model[10]
fit_model[11]
fit_model[12]
fit_model[13]
fit_model[14]
fit_model[15]
fit_model[16]
fit_model[17]
shiny::runApp('Github/SS-DL-tool')
?verbatimTextOutput
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
summary(fit_model)
class(fit_model)
summary(fit_model)
class(summary(fit_model))
attributs(summary(fit_model))
attributes(summary(fit_model))
as.character(summary(fit_model))
class(as.character(summary(fit_model)))
paste0("Diagnostics",(as.character(summary(fit_model))))
save(summary(fit_model),paste0(p,"/fit_model_sum.RData"))
getwd()
save(summary(fit_model),"test.Rdata")
print(summary(fit_model))
paste0(""BB,print(summary(fit_model)))
paste0("BB",print(summary(fit_model)))
xx<-paste0("BB",print(summary(fit_model)))
xx
levels(fit_model)
fit_model
summary(fit_model)
paste0("BB",fit_model)
fit_model
fit_model[1]
fit_model[[1]]
xx<-list(summary(fit_model))
xx
xx[[1]]
?sink
file.summary.out<-file(paste0(p,"/file.summary.out.log"))
ile.summary.out
file.summary.out
summary(fit_model)
sink(file.summary.out,append=TRUE)
summary(fit_model)
cat(readLines("file.summary.out"), sep="\n")
file.summary.out
sink()
file.summary.out<-file(paste0(p,"/file.summary.out.log"))
sink(file.summary.out,append=TRUE)
sink(file.summary.out,append=TRUE,type="message")
summary(fit_model)
sink()
sink(type="message")
cat(readLines("file.summary.out"), sep="\n")
file.summary.out<-file(paste0(p,"/file.summary.out.log"))
sink(file.summary.out,split=TRUE)
print(summary(fit_model))
file.summary.out
save(file.summary.out,paste0(p,"/file.summary.out.log"))
save(file.summary.out)
?capture.output
utils::capture.output(summary(fit_model), file=paste0(p,"/file.summary.out.log"))
paste0(p,"/file.summary.out.log")
xx<-read(paste0(p,"/file.summary.out.log"))
?read
?read.txt
?read.text
?load
xx<-read.delim(paste0(p,"/file.summary.out.log"))
xx
?read.delim
?capture.output
clse()
cl0se()
close()
dev.off*()
dev.off()
utils::capture.output(summary(fit_model), file=NULL)
fit.mod.summary<-utils::capture.output(summary(fit_model), file=NULL)
fit.mod.summary
print(fit.mod.summary)
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?dir.create
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
dir.exists("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1_RWM")
dir.exists("C:/Users/Jason.Cope/Documents/Github/SS-DL-tool/Scenarios/Scenario_1_RWM")
shiny::runApp('Github/SS-DL-tool')
dir.exists(file.path(modeff.dir,modeff.name)
)
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
print(fit.mod.summary.out)
fit.mod.summary
utils::capture.output(summary(fit_model), file=NULL)
utils::capture.output(summary(fit_model), file=NULL)
fit.mod.summary
fit.mod.summary[1]
print(fit.mod.summary)
print(fit.mod.summary)
shiny::runApp('Github/SS-DL-tool')
paste0(fit.mod.summary[1],fit.mod.summary[2],fit.mod.summary[3])
?launch_shinyadmb
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
?try
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
debug(SSexecutivesummary)
Get.Values(replist = replist, label = sb.name,
years, ci_value)
Q
SSexecutivesummary
edit(SSexecutivesummary)
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('TestDeployment')
runApp('Github/Natural-Mortality-Tool')
?adnuts
?sample_nuts
library(adnuts)
?sample_nuts
runApp('Github/SS-DL-tool')
runApp('Github/SS-DL-tool')
shiny::runApp('Github/SS-DL-tool')
setwd("C:/Users/Jason.Cope/Downloads/phylosem-main/phylosem-main")
remotes::install_local( build_vignettes=TRUE )
install.packages(c("admisc", "ape", "BiocManager", "blob", "bookdown", "broom", "cachem", "car", "caret", "chron", "classInt", "cli", "commonmark", "conquer", "contentid", "covr", "data.table", "datawizard", "dbplyr", "dendextend", "DEoptimR", "descr", "DescTools", "deSolve", "distributional", "dplyr", "dtplyr", "duckdb", "ellipse", "emmeans", "FactoMineR", "fastmap", "fBasics", "flexmix", "flextable", "float", "FNN", "fontawesome", "forecast", "Formula", "future", "gargle", "gdtools", "GenSA", "ggeffects", "ggimage", "ggiraph", "ggplot2", "ggpubr", "ggsci", "gh", "git2r", "glmmTMB", "glmnet", "googledrive", "googlesheets4", "GPArotation", "gss", "gt", "gtable", "h2o", "hardhat", "haven", "hexbin", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "insight", "interp", "ipred", "lares", "lattice", "lava", "lme4", "loo", "lubridate", "magick", "markdown", "MASS", "Matrix", "measurements", "memisc", "mgcv", "mirt", "mistr", "modelr", "MSEtool", "multcomp", "multcompView", "officer", "openssl", "packrat", "pak", "parallelly", "pdftools", "pillar", "pkgcache", "pkgdepends", "posterior", "processx", "prodlim", "ps", "psych", "qpdf", "quanteda", "quanteda.textmodels", "quanteda.textplots", "quanteda.textstats", "quantmod", "quantreg", "raster", "RcppArmadillo", "RcppParallel", "RCurl", "reactable", "readr", "recipes", "relations", "rfishbase", "rgdal", "rgeos", "rgl", "Rglpk", "RhpcBLASctl", "rlang", "rmarkdown", "rms", "robustbase", "RSQLite", "rstanarm", "rstantools", "scatterplot3d", "segmented", "servr", "sets", "sf", "sn", "spData", "spdep", "spelling", "styler", "survival", "terra", "testthat", "TH.data", "tibble", "tidyverse", "tinytest", "tinytex", "TMB", "tmbstan", "topicmodels", "triebeard", "truncnorm", "V8", "vcdExtra", "vctrs", "webmockr", "wk", "xfun", "XML", "xts", "zip", "zoo"))
install.packages(c("admisc", "ape", "BiocManager", "blob", "bookdown", "broom", "cachem", "car", "caret", "chron", "classInt", "cli", "commonmark", "conquer", "contentid", "covr", "data.table", "datawizard", "dbplyr", "dendextend", "DEoptimR", "descr", "DescTools", "deSolve", "distributional", "dplyr", "dtplyr", "duckdb", "ellipse", "emmeans", "FactoMineR", "fastmap", "fBasics", "flexmix", "flextable", "float", "FNN", "fontawesome", "forecast", "Formula", "future", "gargle", "gdtools", "GenSA", "ggeffects", "ggimage", "ggiraph", "ggplot2", "ggpubr", "ggsci", "gh", "git2r", "glmmTMB", "glmnet", "googledrive", "googlesheets4", "GPArotation", "gss", "gt", "gtable", "h2o", "hardhat", "haven", "hexbin", "Hmisc", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "insight", "interp", "ipred", "lares", "lattice", "lava", "lme4", "loo", "lubridate", "magick", "markdown", "MASS", "Matrix", "measurements", "memisc", "mgcv", "mirt", "mistr", "modelr", "MSEtool", "multcomp", "multcompView", "officer", "openssl", "packrat", "pak", "parallelly", "pdftools", "pillar", "pkgcache", "pkgdepends", "posterior", "processx", "prodlim", "ps", "psych", "qpdf", "quanteda", "quanteda.textmodels", "quanteda.textplots", "quanteda.textstats", "quantmod", "quantreg", "raster", "RcppArmadillo", "RcppParallel", "RCurl", "reactable", "readr", "recipes", "relations", "rfishbase", "rgdal", "rgeos", "rgl", "Rglpk", "RhpcBLASctl", "rlang", "rmarkdown", "rms", "robustbase", "RSQLite", "rstanarm", "rstantools", "scatterplot3d", "segmented", "servr", "sets", "sf", "sn", "spData", "spdep", "spelling", "styler", "survival", "terra", "testthat", "TH.data", "tibble", "tidyverse", "tinytest", "tinytex", "TMB", "tmbstan", "topicmodels", "triebeard", "truncnorm", "V8", "vcdExtra", "vctrs", "webmockr", "wk", "xfun", "XML", "xts", "zip", "zoo"))
remotes::install_local( build_vignettes=TRUE )
remotes::install_local( build_vignettes=FALSE)
library(phylosem)
?phylosem
library(phylopath)
# Run phylosem
model = "
DD -> RS, p1
BM -> LS, p2
BM -> NL, p3
NL -> DD, p4
"
psem = phylosem( sem = model,
data = rhino[,c("BM","NL","DD","RS","LS")],
tree = rhino_tree )
coef_plot( as(psem,"fitted_DAG") )
plot( as(psem,"fitted_DAG") )
mysem = as(psem,"sem")
sem::pathDiagram( model = mysem,
style = "traditional",
edge.labels = "values" )
myplot = semPlot::semPlotModel( as(psem,"sem") )
install.packages("DiagrammeR")
mysem = as(psem,"sem")
sem::pathDiagram( model = mysem,
style = "traditional",
edge.labels = "values" )
myplot = semPlot::semPlotModel( as(psem,"sem") )
install.packages("semPlot")
mysem = as(psem,"sem")
sem::pathDiagram( model = mysem,
style = "traditional",
edge.labels = "values" )
myplot = semPlot::semPlotModel( as(psem,"sem") )
semPlot::semPaths( myplot,
nodeLabels = Plot@Vars$name )
library("DiagrammeR")
library("semPlot")
mysem = as(psem,"sem")
sem::pathDiagram( model = mysem,
style = "traditional",
edge.labels = "values" )
myplot = semPlot::semPlotModel( as(psem,"sem") )
semPlot::semPaths( myplot,
nodeLabels = Plot@Vars$name )
library(phylobase)
library(phylosignal)
install.packages("phylosignal")
library(phylobase)
library(phylosignal)
plot( as(psem,"phylo4d") )
barplot( as(psem,"phylo4d") )
dotplot( as(psem,"phylo4d") )
gridplot( as(psem,"phylo4d") )
# Cluster based on phylogeny and traits
gC = graphClust( as(psem,"phylo4d"),
lim.phylo = 5,
lim.trait = 5,
scale.lim = FALSE)
plot(gC, which = "graph", ask = FALSE)
setwd( R'(C:/Users/Jason.Cope/Downloads/retechnicalreviewforpcminfisheriesgrumppiecearticl)' )
getwd()
library(phylosem)
library(phylobase)
use_phylogeny = TRUE
tree = ape::read.tree( "fishtree.tre" )
if( FALSE ){
Data = read.csv("Mlifehist_ver1.0.csv")
Data$GenusSpecies = factor( paste0(Data$Genus, "_", Data$Species) )
#
load( "C:/Users/James.Thorson/Desktop/Work files/Collaborations/2021 -- FishLife update/Data_2022-04-21/FishglobTraits_Pop2.Rdata" )
Genus_species = paste0( FishGlobTraits$Z_ik[,'Genus'], "_", FishGlobTraits$Z_ik[,'Species'] )
Tapply = tapply( FishGlobTraits$Y_ij[,"length_maturity"], INDEX=Genus_species, FUN=mean, na.rm=TRUE )
Match = match(Data$GenusSpecies, names(Tapply) )
Data = cbind( Data, "Lmat" = 10*Tapply[Match] )
Data$Genus = factor( Data$Genus )
Data$Family = factor( Data$Family )
Data$Order = factor( Data$Order )
# Drop duplicates
Data = Data[match(unique(Data$GenusSpecies),Data$GenusSpecies), ]
# log-transform to simplify later syuntax
Data = cbind( Data, "logM"=log(Data[,'M']), "logK"=log(Data[,'K']), "logtmax"=log(Data[,'tmax']), "logLinf"=log(Data[,'Linf']),
"logLmat"=log(Data[,'Lmat']) )
Data = na.omit(Data[,c("logM","logK","logLinf","logtmax","Order","Family","Genus","GenusSpecies")])
rownames(Data) = Data$GenusSpecies
write.csv( Data, file="Full_data.csv" )
}else{
Data = read.csv( file="Full_data.csv" )
rownames(Data) = Data$GenusSpecies
}
# Rename pollock in tree (for current nomenclature)
tree$tip.label = ifelse( tree$tip.label=="Theragra_chalcogramma", "Gadus_chalcogrammus", tree$tip.label )
# M / K / Linf prior
if( isTRUE(use_phylogeny) ){
species_to_use = intersect( tree$tip.label, Data$GenusSpecies )
species_to_drop = setdiff( Data$GenusSpecies, tree$tip.label )
# Drop tips not present in database
tree = ape::keep.tip( tree, tip=species_to_use )
tree$node.label = 1:ape::Nnode(tree)
# Drop data not in phylogeny
rows_to_use = which( Data$GenusSpecies %in% species_to_use )
Data = Data[rows_to_use,]
}else{
# Make taxonomic tree
tree = ape::as.phylo( ~Order/Family/Genus/GenusSpecies, data=Data, collapse=FALSE)
tree$edge.length = rep(1,nrow(tree$edge))
tree = collapse.singles(tree)
tmp = root(tree, node=ape::Ntip(tree)+1 )
plot(tmp)
}
Sem = "
logK -> logtmax, b1
logLinf -> logtmax, b2
logtmax -> logM, a
"
# Model selection
Grid = expand.grid( "OU"=c(FALSE,TRUE), "lambda"=c(FALSE,TRUE), "kappa"=c(FALSE,TRUE) )
psem_grid = NULL
for( i in 1:nrow(Grid)){
psem_grid[[i]] = phylosem( data=Data[,c("logK","logLinf","logM","logtmax")],
tree = tree,
sem = Sem,
estimate_ou = Grid[i,'OU'],
estimate_lambda = Grid[i,'lambda'],
estimate_kappa = Grid[i,'kappa'] )
}
Grid$AIC = sapply( psem_grid, \(m) m$opt$AIC )
Grid = Grid[order(Grid$AIC,decreasing=FALSE),]
#
psem1 = psem_grid[[as.numeric(rownames(Grid[1,]))]]
#
mysem = as(psem1,"sem")
sem::pathDiagram( model = mysem,
style = "ram",
edge.labels = "values",
variables = c("log(K)", "log(Linf)", "log(M)", "log(tmax)") )
# Make into phylobase
traits = as( psem1, "phylo4d" )
plot(traits)
21,222-15000
21222-15000
21222-15000-816
21222-15000-800
load("C:/Users/Jason.Cope/Desktop/Black rockfish 2022/Data/WA/Indices/Nearshore Dive Survey/Black_rockfish_OCNMS_indices.Rdata")
ls()
bk.rockfish.output
load("C:/Users/Jason.Cope/Desktop/Black rockfish 2022/Data/WA/Indices/Nearshore Dive Survey/Black_rockfish_lengths_2015-22.Rdata")
ls()
bk.rockfish.output
ls()
length.dat
names(length.dat)
length.dat$dat.seme.all.binned
length.dat$dat.seme.all
shiny::runApp('~/Github/SS-DL-tool')
shiny::runApp('~/Github/SS-DL-tool')
0.25/9
4/9
15/36*30/36*19/36
15*30*19
36^3
3.25/4
runApp('~/Github/SS-DL-tool')
runApp('~/Github/SS-DL-tool')
runApp('~/Github/SS-DL-tool')
runApp('C:/Users/Jason.Cope/Downloads/fishualizeR-master (1)/fishualizeR-master')
runApp('C:/Users/Jason.Cope/Downloads/fishualizeR-master (1)/fishualizeR-master')
runApp('~/Github/SS-DL-tool')
runApp('~/Github/SS-DL-tool')
